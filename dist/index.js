/*! For license information please see index.js.LICENSE.txt */
!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t(require("react"));else if("function"==typeof define&&define.amd)define(["react"],t);else{var r="object"==typeof exports?t(require("react")):t(e.React);for(var n in r)("object"==typeof exports?exports:e)[n]=r[n]}}(self,(e=>(()=>{"use strict";var t={679:(e,t,r)=>{var n=r(864),i={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},s={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},a={};function l(e){return n.isMemo(e)?s:a[e.$$typeof]||i}a[n.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},a[n.Memo]=s;var u=Object.defineProperty,c=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,f=Object.getOwnPropertyDescriptor,h=Object.getPrototypeOf,p=Object.prototype;e.exports=function e(t,r,n){if("string"!=typeof r){if(p){var i=h(r);i&&i!==p&&e(t,i,n)}var s=c(r);d&&(s=s.concat(d(r)));for(var a=l(t),y=l(r),g=0;g<s.length;++g){var m=s[g];if(!(o[m]||n&&n[m]||y&&y[m]||a&&a[m])){var v=f(r,m);try{u(t,m,v)}catch(e){}}}}return t}},914:(e,t)=>{},921:(e,t)=>{var r="function"==typeof Symbol&&Symbol.for,n=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,o=r?Symbol.for("react.fragment"):60107,s=r?Symbol.for("react.strict_mode"):60108,a=r?Symbol.for("react.profiler"):60114,l=r?Symbol.for("react.provider"):60109,u=r?Symbol.for("react.context"):60110,c=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,f=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,p=r?Symbol.for("react.suspense_list"):60120,y=r?Symbol.for("react.memo"):60115,g=r?Symbol.for("react.lazy"):60116,m=r?Symbol.for("react.block"):60121,v=r?Symbol.for("react.fundamental"):60117,b=r?Symbol.for("react.responder"):60118,x=r?Symbol.for("react.scope"):60119;function w(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case n:switch(e=e.type){case c:case d:case o:case a:case s:case h:return e;default:switch(e=e&&e.$$typeof){case u:case f:case g:case y:case l:return e;default:return t}}case i:return t}}}function k(e){return w(e)===d}t.AsyncMode=c,t.ConcurrentMode=d,t.ContextConsumer=u,t.ContextProvider=l,t.Element=n,t.ForwardRef=f,t.Fragment=o,t.Lazy=g,t.Memo=y,t.Portal=i,t.Profiler=a,t.StrictMode=s,t.Suspense=h,t.isAsyncMode=function(e){return k(e)||w(e)===c},t.isConcurrentMode=k,t.isContextConsumer=function(e){return w(e)===u},t.isContextProvider=function(e){return w(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===n},t.isForwardRef=function(e){return w(e)===f},t.isFragment=function(e){return w(e)===o},t.isLazy=function(e){return w(e)===g},t.isMemo=function(e){return w(e)===y},t.isPortal=function(e){return w(e)===i},t.isProfiler=function(e){return w(e)===a},t.isStrictMode=function(e){return w(e)===s},t.isSuspense=function(e){return w(e)===h},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===d||e===a||e===s||e===h||e===p||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===y||e.$$typeof===l||e.$$typeof===u||e.$$typeof===f||e.$$typeof===v||e.$$typeof===b||e.$$typeof===x||e.$$typeof===m)},t.typeOf=w},864:(e,t,r)=>{e.exports=r(921)},121:(e,t,r)=>{r.d(t,{Z:()=>n}),e=r.hmd(e);const n=function(e){var t,r=e.Symbol;return"function"==typeof r?r.observable?t=r.observable:(t=r("observable"),r.observable=t):t="@@observable",t}("undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==r.g?r.g:e)},787:t=>{t.exports=e}},r={};function n(e){var i=r[e];if(void 0!==i)return i.exports;var o=r[e]={id:e,loaded:!1,exports:{}};return t[e](o,o.exports,n),o.loaded=!0,o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var i={};return(()=>{function e(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function t(t,r){if(t){if("string"==typeof t)return e(t,r);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?e(t,r):void 0}}function r(e,r){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,i,o=[],s=!0,a=!1;try{for(r=r.call(e);!(s=(n=r.next()).done)&&(o.push(n.value),!t||o.length!==t);s=!0);}catch(e){a=!0,i=e}finally{try{s||null==r.return||r.return()}finally{if(a)throw i}}return o}}(e,r)||t(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}n.r(i),n.d(i,{default:()=>pn});var o=n(787),s=n.n(o);const a=(0,o.createContext)();function l(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function u(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?u(Object(r),!0).forEach((function(t){l(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):u(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var d=0,f={toString:function(){return"HYG_"+(d+=1)}},h=function(e){var t=e.dimensions,r=e.size,n=e.scrollTop,i=e.lineGap,o=t.height,s=t.itemHeight,a=t.width,l=t.itemWidth,u=Math.floor(a/l),c=Math.ceil(r*l/a),d=c*s,f=n>i*s,h=Math.max(0,Math.floor(n/s)-i),p=h*s,y=2*i+Math.ceil(o/s),g=y*s,m=f?h*u:0;return{fromItem:m,toItem:f?m+u*y:y*u,carpetHeight:d,topFillerHeight:p,bottomFillerHeight:d-p-g,linesToRender:y,dataHeight:g,loading:!1,lines:c,rows:u}},p=function(e,t){var r=t.payload,n=void 0===r?{}:r,i=t.type,o=e.dimensions,s=e.originalData,a=e.virtual,l=e.virtual.lineGap,u={loading:function(){return c(c({},a),{},{loading:!0})},scroll:function(){var e=parseInt(n,10),t=h({dimensions:o,size:s.length,scrollTop:e,lineGap:l}),r=t.fromItem,i=t.toItem;return{data:s.slice(r,i),virtual:c(c({},a),t)}}};return i in u?c(c({},e),u[i]()):e},y=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};console.log("init");var t=e.data,r=void 0===t?[]:t,n=e.lineGap,i=void 0===n?2:n,o=e.Loader,a=void 0===o?function(){return s().createElement("div",null,"loading")}:o,u=e.dimensions,d=(u=void 0===u?{}:u).width,p=void 0===d?1200:d,y=u.height,g=void 0===y?800:y,m=u.itemHeight,v=void 0===m?150:m,b=u.itemWidth,x=void 0===b?200:b,w=e.rhgID,k=void 0===w?"_ID":w,S=e.debounceTimes,P=(S=void 0===S?{}:S).scrolling,R=void 0===P?10:P,O={width:p,height:g,itemHeight:v,itemWidth:x},C=r.map((function(e){return c(l({},k,"".concat(f)),e)})),j=h({dimensions:O,size:C.length,scrollTop:0,lineGap:i}),A=c({loading:!1,lineGap:i},j),T=j.fromItem,M=j.toItem;return c(c({},e),{},{rhgID:k,originalData:C,data:C.slice(T,M),Loader:a,dimensions:O,virtual:A,debounceTimes:{scrolling:R}})};const g=function(){return{reducer:p,init:y}};function m(){return m=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},m.apply(this,arguments)}function v(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}var b=n(679),x=n.n(b);n(914);function w(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function k(){return k=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},k.apply(this,arguments)}function S(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function P(e){var t=function(t){var r,n;function i(){for(var r,n=arguments.length,i=new Array(n),o=0;o<n;o++)i[o]=arguments[o];return w(S(S(r=t.call.apply(t,[this].concat(i))||this)),"cachedTheme",void 0),w(S(S(r)),"lastOuterTheme",void 0),w(S(S(r)),"lastTheme",void 0),w(S(S(r)),"renderProvider",(function(t){var n=r.props.children;return s().createElement(e.Provider,{value:r.getTheme(t)},n)})),r}n=t,(r=i).prototype=Object.create(n.prototype),r.prototype.constructor=r,r.__proto__=n;var o=i.prototype;return o.getTheme=function(e){if(this.props.theme!==this.lastTheme||e!==this.lastOuterTheme||!this.cachedTheme)if(this.lastOuterTheme=e,this.lastTheme=this.props.theme,"function"==typeof this.lastTheme){var t=this.props.theme;this.cachedTheme=t(e)}else{var r=this.props.theme;this.cachedTheme=e?k({},e,r):r}return this.cachedTheme},o.render=function(){return this.props.children?s().createElement(e.Consumer,null,this.renderProvider):null},i}(s().Component);return t}function R(e){return function(t){var r=s().forwardRef((function(r,n){return s().createElement(e.Consumer,null,(function(e){return s().createElement(t,k({theme:e,ref:n},r))}))}));return x()(r,t),r}}function O(e){return function(){return s().useContext(e)}}var C,j=(0,o.createContext)(),A=(C=j,R(C),O(C),P(C),"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e});const T="object"===("undefined"==typeof window?"undefined":A(window))&&"object"===("undefined"==typeof document?"undefined":A(document))&&9===document.nodeType;const M=function(e,t){};function E(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function I(e,t,r){return t&&E(e.prototype,t),r&&E(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}function N(e,t){return N=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},N(e,t)}function z(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,N(e,t)}function $(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var D={}.constructor;function W(e){if(null==e||"object"!=typeof e)return e;if(Array.isArray(e))return e.map(W);if(e.constructor!==D)return e;var t={};for(var r in e)t[r]=W(e[r]);return t}function F(e,t,r){void 0===e&&(e="unnamed");var n=r.jss,i=W(t),o=n.plugins.onCreateRule(e,i,r);return o||(e[0],null)}var H=function(e,t){for(var r="",n=0;n<e.length&&"!important"!==e[n];n++)r&&(r+=t),r+=e[n];return r},L=function(e,t){if(void 0===t&&(t=!1),!Array.isArray(e))return e;var r="";if(Array.isArray(e[0]))for(var n=0;n<e.length&&"!important"!==e[n];n++)r&&(r+=", "),r+=H(e[n]," ");else r=H(e,", ");return t||"!important"!==e[e.length-1]||(r+=" !important"),r};function V(e){return e&&!1===e.format?{linebreak:"",space:""}:{linebreak:"\n",space:" "}}function U(e,t){for(var r="",n=0;n<t;n++)r+="  ";return r+e}function q(e,t,r){void 0===r&&(r={});var n="";if(!t)return n;var i=r.indent,o=void 0===i?0:i,s=t.fallbacks;!1===r.format&&(o=-1/0);var a=V(r),l=a.linebreak,u=a.space;if(e&&o++,s)if(Array.isArray(s))for(var c=0;c<s.length;c++){var d=s[c];for(var f in d){var h=d[f];null!=h&&(n&&(n+=l),n+=U(f+":"+u+L(h)+";",o))}}else for(var p in s){var y=s[p];null!=y&&(n&&(n+=l),n+=U(p+":"+u+L(y)+";",o))}for(var g in t){var m=t[g];null!=m&&"fallbacks"!==g&&(n&&(n+=l),n+=U(g+":"+u+L(m)+";",o))}return(n||r.allowEmpty)&&e?(n&&(n=""+l+n+l),U(""+e+u+"{"+n,--o)+U("}",o)):n}var G=/([[\].#*$><+~=|^:(),"'`\s])/g,_="undefined"!=typeof CSS&&CSS.escape,B=function(e){return _?_(e):e.replace(G,"\\$1")},X=function(){function e(e,t,r){this.type="style",this.isProcessed=!1;var n=r.sheet,i=r.Renderer;this.key=e,this.options=r,this.style=t,n?this.renderer=n.renderer:i&&(this.renderer=new i)}return e.prototype.prop=function(e,t,r){if(void 0===t)return this.style[e];var n=!!r&&r.force;if(!n&&this.style[e]===t)return this;var i=t;r&&!1===r.process||(i=this.options.jss.plugins.onChangeValue(t,e,this));var o=null==i||!1===i,s=e in this.style;if(o&&!s&&!n)return this;var a=o&&s;if(a?delete this.style[e]:this.style[e]=i,this.renderable&&this.renderer)return a?this.renderer.removeProperty(this.renderable,e):this.renderer.setProperty(this.renderable,e,i),this;var l=this.options.sheet;return l&&l.attached,this},e}(),Y=function(e){function t(t,r,n){var i;i=e.call(this,t,r,n)||this;var o=n.selector,s=n.scoped,a=n.sheet,l=n.generateId;return o?i.selectorText=o:!1!==s&&(i.id=l($($(i)),a),i.selectorText="."+B(i.id)),i}z(t,e);var r=t.prototype;return r.applyTo=function(e){var t=this.renderer;if(t){var r=this.toJSON();for(var n in r)t.setProperty(e,n,r[n])}return this},r.toJSON=function(){var e={};for(var t in this.style){var r=this.style[t];"object"!=typeof r?e[t]=r:Array.isArray(r)&&(e[t]=L(r))}return e},r.toString=function(e){var t=this.options.sheet,r=!!t&&t.options.link?m({},e,{allowEmpty:!0}):e;return q(this.selectorText,this.style,r)},I(t,[{key:"selector",set:function(e){if(e!==this.selectorText){this.selectorText=e;var t=this.renderer,r=this.renderable;if(r&&t)t.setSelector(r,e)||t.replaceRule(r,this)}},get:function(){return this.selectorText}}]),t}(X),Z={onCreateRule:function(e,t,r){return"@"===e[0]||r.parent&&"keyframes"===r.parent.type?null:new Y(e,t,r)}},J={indent:1,children:!0},K=/@([\w-]+)/,Q=function(){function e(e,t,r){this.type="conditional",this.isProcessed=!1,this.key=e;var n=e.match(K);for(var i in this.at=n?n[1]:"unknown",this.query=r.name||"@"+this.at,this.options=r,this.rules=new Se(m({},r,{parent:this})),t)this.rules.add(i,t[i]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.indexOf=function(e){return this.rules.indexOf(e)},t.addRule=function(e,t,r){var n=this.rules.add(e,t,r);return n?(this.options.jss.plugins.onProcessRule(n),n):null},t.replaceRule=function(e,t,r){var n=this.rules.replace(e,t,r);return n&&this.options.jss.plugins.onProcessRule(n),n},t.toString=function(e){void 0===e&&(e=J);var t=V(e).linebreak;if(null==e.indent&&(e.indent=J.indent),null==e.children&&(e.children=J.children),!1===e.children)return this.query+" {}";var r=this.rules.toString(e);return r?this.query+" {"+t+r+t+"}":""},e}(),ee=/@media|@supports\s+/,te={onCreateRule:function(e,t,r){return ee.test(e)?new Q(e,t,r):null}},re={indent:1,children:!0},ne=/@keyframes\s+([\w-]+)/,ie=function(){function e(e,t,r){this.type="keyframes",this.at="@keyframes",this.isProcessed=!1;var n=e.match(ne);n&&n[1]?this.name=n[1]:this.name="noname",this.key=this.type+"-"+this.name,this.options=r;var i=r.scoped,o=r.sheet,s=r.generateId;for(var a in this.id=!1===i?this.name:B(s(this,o)),this.rules=new Se(m({},r,{parent:this})),t)this.rules.add(a,t[a],m({},r,{parent:this}));this.rules.process()}return e.prototype.toString=function(e){void 0===e&&(e=re);var t=V(e).linebreak;if(null==e.indent&&(e.indent=re.indent),null==e.children&&(e.children=re.children),!1===e.children)return this.at+" "+this.id+" {}";var r=this.rules.toString(e);return r&&(r=""+t+r+t),this.at+" "+this.id+" {"+r+"}"},e}(),oe=/@keyframes\s+/,se=/\$([\w-]+)/g,ae=function(e,t){return"string"==typeof e?e.replace(se,(function(e,r){return r in t?t[r]:e})):e},le=function(e,t,r){var n=e[t],i=ae(n,r);i!==n&&(e[t]=i)},ue={onCreateRule:function(e,t,r){return"string"==typeof e&&oe.test(e)?new ie(e,t,r):null},onProcessStyle:function(e,t,r){return"style"===t.type&&r?("animation-name"in e&&le(e,"animation-name",r.keyframes),"animation"in e&&le(e,"animation",r.keyframes),e):e},onChangeValue:function(e,t,r){var n=r.options.sheet;if(!n)return e;switch(t){case"animation":case"animation-name":return ae(e,n.keyframes);default:return e}}},ce=function(e){function t(){return e.apply(this,arguments)||this}return z(t,e),t.prototype.toString=function(e){var t=this.options.sheet,r=!!t&&t.options.link?m({},e,{allowEmpty:!0}):e;return q(this.key,this.style,r)},t}(X),de={onCreateRule:function(e,t,r){return r.parent&&"keyframes"===r.parent.type?new ce(e,t,r):null}},fe=function(){function e(e,t,r){this.type="font-face",this.at="@font-face",this.isProcessed=!1,this.key=e,this.style=t,this.options=r}return e.prototype.toString=function(e){var t=V(e).linebreak;if(Array.isArray(this.style)){for(var r="",n=0;n<this.style.length;n++)r+=q(this.at,this.style[n]),this.style[n+1]&&(r+=t);return r}return q(this.at,this.style,e)},e}(),he=/@font-face/,pe={onCreateRule:function(e,t,r){return he.test(e)?new fe(e,t,r):null}},ye=function(){function e(e,t,r){this.type="viewport",this.at="@viewport",this.isProcessed=!1,this.key=e,this.style=t,this.options=r}return e.prototype.toString=function(e){return q(this.key,this.style,e)},e}(),ge={onCreateRule:function(e,t,r){return"@viewport"===e||"@-ms-viewport"===e?new ye(e,t,r):null}},me=function(){function e(e,t,r){this.type="simple",this.isProcessed=!1,this.key=e,this.value=t,this.options=r}return e.prototype.toString=function(e){if(Array.isArray(this.value)){for(var t="",r=0;r<this.value.length;r++)t+=this.key+" "+this.value[r]+";",this.value[r+1]&&(t+="\n");return t}return this.key+" "+this.value+";"},e}(),ve={"@charset":!0,"@import":!0,"@namespace":!0},be={onCreateRule:function(e,t,r){return e in ve?new me(e,t,r):null}},xe=[Z,te,ue,de,pe,ge,be],we={process:!0},ke={force:!0,process:!0},Se=function(){function e(e){this.map={},this.raw={},this.index=[],this.counter=0,this.options=e,this.classes=e.classes,this.keyframes=e.keyframes}var t=e.prototype;return t.add=function(e,t,r){var n=this.options,i=n.parent,o=n.sheet,s=n.jss,a=n.Renderer,l=n.generateId,u=n.scoped,c=m({classes:this.classes,parent:i,sheet:o,jss:s,Renderer:a,generateId:l,scoped:u,name:e,keyframes:this.keyframes,selector:void 0},r),d=e;e in this.raw&&(d=e+"-d"+this.counter++),this.raw[d]=t,d in this.classes&&(c.selector="."+B(this.classes[d]));var f=F(d,t,c);if(!f)return null;this.register(f);var h=void 0===c.index?this.index.length:c.index;return this.index.splice(h,0,f),f},t.replace=function(e,t,r){var n=this.get(e),i=this.index.indexOf(n);n&&this.remove(n);var o=r;return-1!==i&&(o=m({},r,{index:i})),this.add(e,t,o)},t.get=function(e){return this.map[e]},t.remove=function(e){this.unregister(e),delete this.raw[e.key],this.index.splice(this.index.indexOf(e),1)},t.indexOf=function(e){return this.index.indexOf(e)},t.process=function(){var e=this.options.jss.plugins;this.index.slice(0).forEach(e.onProcessRule,e)},t.register=function(e){this.map[e.key]=e,e instanceof Y?(this.map[e.selector]=e,e.id&&(this.classes[e.key]=e.id)):e instanceof ie&&this.keyframes&&(this.keyframes[e.name]=e.id)},t.unregister=function(e){delete this.map[e.key],e instanceof Y?(delete this.map[e.selector],delete this.classes[e.key]):e instanceof ie&&delete this.keyframes[e.name]},t.update=function(){var e,t,r;if("string"==typeof(arguments.length<=0?void 0:arguments[0])?(e=arguments.length<=0?void 0:arguments[0],t=arguments.length<=1?void 0:arguments[1],r=arguments.length<=2?void 0:arguments[2]):(t=arguments.length<=0?void 0:arguments[0],r=arguments.length<=1?void 0:arguments[1],e=null),e)this.updateOne(this.get(e),t,r);else for(var n=0;n<this.index.length;n++)this.updateOne(this.index[n],t,r)},t.updateOne=function(t,r,n){void 0===n&&(n=we);var i=this.options,o=i.jss.plugins,s=i.sheet;if(t.rules instanceof e)t.rules.update(r,n);else{var a=t.style;if(o.onUpdate(r,t,s,n),n.process&&a&&a!==t.style){for(var l in o.onProcessStyle(t.style,t,s),t.style){var u=t.style[l];u!==a[l]&&t.prop(l,u,ke)}for(var c in a){var d=t.style[c],f=a[c];null==d&&d!==f&&t.prop(c,null,ke)}}}},t.toString=function(e){for(var t="",r=this.options.sheet,n=!!r&&r.options.link,i=V(e).linebreak,o=0;o<this.index.length;o++){var s=this.index[o].toString(e);(s||n)&&(t&&(t+=i),t+=s)}return t},e}(),Pe=function(){function e(e,t){for(var r in this.attached=!1,this.deployed=!1,this.classes={},this.keyframes={},this.options=m({},t,{sheet:this,parent:this,classes:this.classes,keyframes:this.keyframes}),t.Renderer&&(this.renderer=new t.Renderer(this)),this.rules=new Se(this.options),e)this.rules.add(r,e[r]);this.rules.process()}var t=e.prototype;return t.attach=function(){return this.attached||(this.renderer&&this.renderer.attach(),this.attached=!0,this.deployed||this.deploy()),this},t.detach=function(){return this.attached?(this.renderer&&this.renderer.detach(),this.attached=!1,this):this},t.addRule=function(e,t,r){var n=this.queue;this.attached&&!n&&(this.queue=[]);var i=this.rules.add(e,t,r);return i?(this.options.jss.plugins.onProcessRule(i),this.attached?this.deployed?(n?n.push(i):(this.insertRule(i),this.queue&&(this.queue.forEach(this.insertRule,this),this.queue=void 0)),i):i:(this.deployed=!1,i)):null},t.replaceRule=function(e,t,r){var n=this.rules.get(e);if(!n)return this.addRule(e,t,r);var i=this.rules.replace(e,t,r);return i&&this.options.jss.plugins.onProcessRule(i),this.attached?this.deployed?(this.renderer&&(i?n.renderable&&this.renderer.replaceRule(n.renderable,i):this.renderer.deleteRule(n)),i):i:(this.deployed=!1,i)},t.insertRule=function(e){this.renderer&&this.renderer.insertRule(e)},t.addRules=function(e,t){var r=[];for(var n in e){var i=this.addRule(n,e[n],t);i&&r.push(i)}return r},t.getRule=function(e){return this.rules.get(e)},t.deleteRule=function(e){var t="object"==typeof e?e:this.rules.get(e);return!(!t||this.attached&&!t.renderable)&&(this.rules.remove(t),!(this.attached&&t.renderable&&this.renderer)||this.renderer.deleteRule(t.renderable))},t.indexOf=function(e){return this.rules.indexOf(e)},t.deploy=function(){return this.renderer&&this.renderer.deploy(),this.deployed=!0,this},t.update=function(){var e;return(e=this.rules).update.apply(e,arguments),this},t.updateOne=function(e,t,r){return this.rules.updateOne(e,t,r),this},t.toString=function(e){return this.rules.toString(e)},e}(),Re=function(){function e(){this.plugins={internal:[],external:[]},this.registry={}}var t=e.prototype;return t.onCreateRule=function(e,t,r){for(var n=0;n<this.registry.onCreateRule.length;n++){var i=this.registry.onCreateRule[n](e,t,r);if(i)return i}return null},t.onProcessRule=function(e){if(!e.isProcessed){for(var t=e.options.sheet,r=0;r<this.registry.onProcessRule.length;r++)this.registry.onProcessRule[r](e,t);e.style&&this.onProcessStyle(e.style,e,t),e.isProcessed=!0}},t.onProcessStyle=function(e,t,r){for(var n=0;n<this.registry.onProcessStyle.length;n++)t.style=this.registry.onProcessStyle[n](t.style,t,r)},t.onProcessSheet=function(e){for(var t=0;t<this.registry.onProcessSheet.length;t++)this.registry.onProcessSheet[t](e)},t.onUpdate=function(e,t,r,n){for(var i=0;i<this.registry.onUpdate.length;i++)this.registry.onUpdate[i](e,t,r,n)},t.onChangeValue=function(e,t,r){for(var n=e,i=0;i<this.registry.onChangeValue.length;i++)n=this.registry.onChangeValue[i](n,t,r);return n},t.use=function(e,t){void 0===t&&(t={queue:"external"});var r=this.plugins[t.queue];-1===r.indexOf(e)&&(r.push(e),this.registry=[].concat(this.plugins.external,this.plugins.internal).reduce((function(e,t){for(var r in t)r in e&&e[r].push(t[r]);return e}),{onCreateRule:[],onProcessRule:[],onProcessStyle:[],onProcessSheet:[],onChangeValue:[],onUpdate:[]}))},e}(),Oe=function(){function e(){this.registry=[]}var t=e.prototype;return t.add=function(e){var t=this.registry,r=e.options.index;if(-1===t.indexOf(e))if(0===t.length||r>=this.index)t.push(e);else for(var n=0;n<t.length;n++)if(t[n].options.index>r)return void t.splice(n,0,e)},t.reset=function(){this.registry=[]},t.remove=function(e){var t=this.registry.indexOf(e);this.registry.splice(t,1)},t.toString=function(e){for(var t=void 0===e?{}:e,r=t.attached,n=v(t,["attached"]),i=V(n).linebreak,o="",s=0;s<this.registry.length;s++){var a=this.registry[s];null!=r&&a.attached!==r||(o&&(o+=i),o+=a.toString(n))}return o},I(e,[{key:"index",get:function(){return 0===this.registry.length?0:this.registry[this.registry.length-1].options.index}}]),e}(),Ce=new Oe,je="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window&&window.Math===Math?window:"undefined"!=typeof self&&self.Math===Math?self:Function("return this")(),Ae="2f1acc6c3a606b082e5eef5e54414ffb";null==je[Ae]&&(je[Ae]=0);var Te=je[Ae]++,Me=function(e){void 0===e&&(e={});var t=0;return function(r,n){t+=1;var i="",o="";return n&&(n.options.classNamePrefix&&(o=n.options.classNamePrefix),null!=n.options.jss.id&&(i=String(n.options.jss.id))),e.minify?""+(o||"c")+Te+i+t:o+r.key+"-"+Te+(i?"-"+i:"")+"-"+t}},Ee=function(e){var t;return function(){return t||(t=e()),t}},Ie=function(e,t){try{return e.attributeStyleMap?e.attributeStyleMap.get(t):e.style.getPropertyValue(t)}catch(e){return""}},Ne=function(e,t,r){try{var n=r;if(Array.isArray(r)&&(n=L(r,!0),"!important"===r[r.length-1]))return e.style.setProperty(t,n,"important"),!0;e.attributeStyleMap?e.attributeStyleMap.set(t,n):e.style.setProperty(t,n)}catch(e){return!1}return!0},ze=function(e,t){try{e.attributeStyleMap?e.attributeStyleMap.delete(t):e.style.removeProperty(t)}catch(e){}},$e=function(e,t){return e.selectorText=t,e.selectorText===t},De=Ee((function(){return document.querySelector("head")}));function We(e){var t=Ce.registry;if(t.length>0){var r=function(e,t){for(var r=0;r<e.length;r++){var n=e[r];if(n.attached&&n.options.index>t.index&&n.options.insertionPoint===t.insertionPoint)return n}return null}(t,e);if(r&&r.renderer)return{parent:r.renderer.element.parentNode,node:r.renderer.element};if(r=function(e,t){for(var r=e.length-1;r>=0;r--){var n=e[r];if(n.attached&&n.options.insertionPoint===t.insertionPoint)return n}return null}(t,e),r&&r.renderer)return{parent:r.renderer.element.parentNode,node:r.renderer.element.nextSibling}}var n=e.insertionPoint;if(n&&"string"==typeof n){var i=function(e){for(var t=De(),r=0;r<t.childNodes.length;r++){var n=t.childNodes[r];if(8===n.nodeType&&n.nodeValue.trim()===e)return n}return null}(n);if(i)return{parent:i.parentNode,node:i.nextSibling}}return!1}var Fe=Ee((function(){var e=document.querySelector('meta[property="csp-nonce"]');return e?e.getAttribute("content"):null})),He=function(e,t,r){try{"insertRule"in e?e.insertRule(t,r):"appendRule"in e&&e.appendRule(t)}catch(e){return!1}return e.cssRules[r]},Le=function(e,t){var r=e.cssRules.length;return void 0===t||t>r?r:t},Ve=function(){function e(e){this.getPropertyValue=Ie,this.setProperty=Ne,this.removeProperty=ze,this.setSelector=$e,this.hasInsertedRules=!1,this.cssRules=[],e&&Ce.add(e),this.sheet=e;var t=this.sheet?this.sheet.options:{},r=t.media,n=t.meta,i=t.element;this.element=i||function(){var e=document.createElement("style");return e.textContent="\n",e}(),this.element.setAttribute("data-jss",""),r&&this.element.setAttribute("media",r),n&&this.element.setAttribute("data-meta",n);var o=Fe();o&&this.element.setAttribute("nonce",o)}var t=e.prototype;return t.attach=function(){if(!this.element.parentNode&&this.sheet){!function(e,t){var r=t.insertionPoint,n=We(t);if(!1!==n&&n.parent)n.parent.insertBefore(e,n.node);else if(r&&"number"==typeof r.nodeType){var i=r,o=i.parentNode;o&&o.insertBefore(e,i.nextSibling)}else De().appendChild(e)}(this.element,this.sheet.options);var e=Boolean(this.sheet&&this.sheet.deployed);this.hasInsertedRules&&e&&(this.hasInsertedRules=!1,this.deploy())}},t.detach=function(){if(this.sheet){var e=this.element.parentNode;e&&e.removeChild(this.element),this.sheet.options.link&&(this.cssRules=[],this.element.textContent="\n")}},t.deploy=function(){var e=this.sheet;e&&(e.options.link?this.insertRules(e.rules):this.element.textContent="\n"+e.toString()+"\n")},t.insertRules=function(e,t){for(var r=0;r<e.index.length;r++)this.insertRule(e.index[r],r,t)},t.insertRule=function(e,t,r){if(void 0===r&&(r=this.element.sheet),e.rules){var n=e,i=r;if("conditional"===e.type||"keyframes"===e.type){var o=Le(r,t);if(!1===(i=He(r,n.toString({children:!1}),o)))return!1;this.refCssRule(e,o,i)}return this.insertRules(n.rules,i),i}var s=e.toString();if(!s)return!1;var a=Le(r,t),l=He(r,s,a);return!1!==l&&(this.hasInsertedRules=!0,this.refCssRule(e,a,l),l)},t.refCssRule=function(e,t,r){e.renderable=r,e.options.parent instanceof Pe&&this.cssRules.splice(t,0,r)},t.deleteRule=function(e){var t=this.element.sheet,r=this.indexOf(e);return-1!==r&&(t.deleteRule(r),this.cssRules.splice(r,1),!0)},t.indexOf=function(e){return this.cssRules.indexOf(e)},t.replaceRule=function(e,t){var r=this.indexOf(e);return-1!==r&&(this.element.sheet.deleteRule(r),this.cssRules.splice(r,1),this.insertRule(t,r))},t.getRules=function(){return this.element.sheet.cssRules},e}(),Ue=0,qe=function(){function e(e){this.id=Ue++,this.version="10.9.0",this.plugins=new Re,this.options={id:{minify:!1},createGenerateId:Me,Renderer:T?Ve:null,plugins:[]},this.generateId=Me({minify:!1});for(var t=0;t<xe.length;t++)this.plugins.use(xe[t],{queue:"internal"});this.setup(e)}var t=e.prototype;return t.setup=function(e){return void 0===e&&(e={}),e.createGenerateId&&(this.options.createGenerateId=e.createGenerateId),e.id&&(this.options.id=m({},this.options.id,e.id)),(e.createGenerateId||e.id)&&(this.generateId=this.options.createGenerateId(this.options.id)),null!=e.insertionPoint&&(this.options.insertionPoint=e.insertionPoint),"Renderer"in e&&(this.options.Renderer=e.Renderer),e.plugins&&this.use.apply(this,e.plugins),this},t.createStyleSheet=function(e,t){void 0===t&&(t={});var r=t.index;"number"!=typeof r&&(r=0===Ce.index?0:Ce.index+1);var n=new Pe(e,m({},t,{jss:this,generateId:t.generateId||this.generateId,insertionPoint:this.options.insertionPoint,Renderer:this.options.Renderer,index:r}));return this.plugins.onProcessSheet(n),n},t.removeStyleSheet=function(e){return e.detach(),Ce.remove(e),this},t.createRule=function(e,t,r){if(void 0===t&&(t={}),void 0===r&&(r={}),"object"==typeof e)return this.createRule(void 0,e,t);var n=m({},r,{name:e,jss:this,Renderer:this.options.Renderer});n.generateId||(n.generateId=this.generateId),n.classes||(n.classes={}),n.keyframes||(n.keyframes={});var i=F(e,t,n);return i&&this.plugins.onProcessRule(i),i},t.use=function(){for(var e=this,t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return r.forEach((function(t){e.plugins.use(t)})),this},e}(),Ge=function(e){return new qe(e)},_e=function(){function e(){this.length=0,this.sheets=new WeakMap}var t=e.prototype;return t.get=function(e){var t=this.sheets.get(e);return t&&t.sheet},t.add=function(e,t){this.sheets.has(e)||(this.length++,this.sheets.set(e,{sheet:t,refs:0}))},t.manage=function(e){var t=this.sheets.get(e);if(t)return 0===t.refs&&t.sheet.attach(),t.refs++,t.sheet;M(!1,"[JSS] SheetsManager: can't find sheet to manage")},t.unmanage=function(e){var t=this.sheets.get(e);t?t.refs>0&&(t.refs--,0===t.refs&&t.sheet.detach()):M(!1,"SheetsManager: can't find sheet to unmanage")},I(e,[{key:"size",get:function(){return this.length}}]),e}(),Be="object"==typeof CSS&&null!=CSS&&"number"in CSS;function Xe(e){var t=null;for(var r in e){var n=e[r],i=typeof n;if("function"===i)t||(t={}),t[r]=n;else if("object"===i&&null!==n&&!Array.isArray(n)){var o=Xe(n);o&&(t||(t={}),t[r]=o)}}return t}Ge();var Ye=Date.now(),Ze="fnValues"+Ye,Je="fnStyle"+ ++Ye;const Ke=function(){return{onCreateRule:function(e,t,r){if("function"!=typeof t)return null;var n=F(e,{},r);return n[Je]=t,n},onProcessStyle:function(e,t){if(Ze in t||Je in t)return e;var r={};for(var n in e){var i=e[n];"function"==typeof i&&(delete e[n],r[n]=i)}return t[Ze]=r,e},onUpdate:function(e,t,r,n){var i=t,o=i[Je];o&&(i.style=o(e)||{});var s=i[Ze];if(s)for(var a in s)i.prop(a,s[a](e),n)}}};var Qe=n(121),et=function(e){return e&&e[Qe.Z]&&e===e[Qe.Z]()};const tt=function(e){return{onCreateRule:function(t,r,n){if(!et(r))return null;var i=r,o=F(t,{},n);return i.subscribe((function(t){for(var r in t)o.prop(r,t[r],e)})),o},onProcessRule:function(t){if(!t||"style"===t.type){var r=t,n=r.style,i=function(t){var i=n[t];if(!et(i))return"continue";delete n[t],i.subscribe({next:function(n){r.prop(t,n,e)}})};for(var o in n)i(o)}}}};var rt=/;\n/,nt=function(e){"string"==typeof e.style&&(e.style=function(e){for(var t={},r=e.split(rt),n=0;n<r.length;n++){var i=(r[n]||"").trim();if(i){var o=i.indexOf(":");if(-1!==o){var s=i.substr(0,o).trim(),a=i.substr(o+1).trim();t[s]=a}}}return t}(e.style))};const it=function(){return{onProcessRule:nt}};var ot="@global",st="@global ",at=function(){function e(e,t,r){for(var n in this.type="global",this.at=ot,this.isProcessed=!1,this.key=e,this.options=r,this.rules=new Se(m({},r,{parent:this})),t)this.rules.add(n,t[n]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.addRule=function(e,t,r){var n=this.rules.add(e,t,r);return n&&this.options.jss.plugins.onProcessRule(n),n},t.replaceRule=function(e,t,r){var n=this.rules.replace(e,t,r);return n&&this.options.jss.plugins.onProcessRule(n),n},t.indexOf=function(e){return this.rules.indexOf(e)},t.toString=function(e){return this.rules.toString(e)},e}(),lt=function(){function e(e,t,r){this.type="global",this.at=ot,this.isProcessed=!1,this.key=e,this.options=r;var n=e.substr(st.length);this.rule=r.jss.createRule(n,t,m({},r,{parent:this}))}return e.prototype.toString=function(e){return this.rule?this.rule.toString(e):""},e}(),ut=/\s*,\s*/g;function ct(e,t){for(var r=e.split(ut),n="",i=0;i<r.length;i++)n+=t+" "+r[i].trim(),r[i+1]&&(n+=", ");return n}const dt=function(){return{onCreateRule:function(e,t,r){if(!e)return null;if(e===ot)return new at(e,t,r);if("@"===e[0]&&e.substr(0,st.length)===st)return new lt(e,t,r);var n=r.parent;return n&&("global"===n.type||n.options.parent&&"global"===n.options.parent.type)&&(r.scoped=!1),r.selector||!1!==r.scoped||(r.selector=e),null},onProcessRule:function(e,t){"style"===e.type&&t&&(function(e,t){var r=e.options,n=e.style,i=n?n[ot]:null;if(i){for(var o in i)t.addRule(o,i[o],m({},r,{selector:ct(o,e.selector)}));delete n[ot]}}(e,t),function(e,t){var r=e.options,n=e.style;for(var i in n)if("@"===i[0]&&i.substr(0,ot.length)===ot){var o=ct(i.substr(ot.length),e.selector);t.addRule(o,n[i],m({},r,{selector:o})),delete n[i]}}(e,t))}}};var ft=function(e){return e&&"object"==typeof e&&!Array.isArray(e)},ht="extendCurrValue"+Date.now();function pt(e,t,r,n){return void 0===n&&(n={}),function(e,t,r,n){if("string"!=typeof e.extend)if(Array.isArray(e.extend))for(var i=0;i<e.extend.length;i++){var o=e.extend[i];pt("string"==typeof o?m({},e,{extend:o}):e.extend[i],t,r,n)}else for(var s in e.extend)"extend"!==s?ft(e.extend[s])?(s in n||(n[s]={}),pt(e.extend[s],t,r,n[s])):n[s]=e.extend[s]:pt(e.extend.extend,t,r,n);else{if(!r)return;var a=r.getRule(e.extend);if(!a)return;if(a===t)return;var l=a.options.parent;l&&pt(l.rules.raw[e.extend],t,r,n)}}(e,t,r,n),function(e,t,r,n){for(var i in e)"extend"!==i&&(ft(n[i])&&ft(e[i])?pt(e[i],t,r,n[i]):ft(e[i])?n[i]=pt(e[i],t,r):n[i]=e[i])}(e,t,r,n),n}const yt=function(){return{onProcessStyle:function(e,t,r){return"extend"in e?pt(e,t,r):e},onChangeValue:function(e,t,r){if("extend"!==t)return e;if(null==e||!1===e){for(var n in r[ht])r.prop(n,null);return r[ht]=null,null}if("object"==typeof e){for(var i in e)r.prop(i,e[i]);r[ht]=e}return null}}};var gt=/\s*,\s*/g,mt=/&/g,vt=/\$([\w-]+)/g;const bt=function(){function e(e,t){return function(r,n){var i=e.getRule(n)||t&&t.getRule(n);return i?i.selector:n}}function t(e,t){for(var r=t.split(gt),n=e.split(gt),i="",o=0;o<r.length;o++)for(var s=r[o],a=0;a<n.length;a++){var l=n[a];i&&(i+=", "),i+=-1!==l.indexOf("&")?l.replace(mt,s):s+" "+l}return i}function r(e,t,r){if(r)return m({},r,{index:r.index+1});var n=e.options.nestingLevel;n=void 0===n?1:n+1;var i=m({},e.options,{nestingLevel:n,index:t.indexOf(e)+1});return delete i.name,i}return{onProcessStyle:function(n,i,o){if("style"!==i.type)return n;var s,a,l=i,u=l.options.parent;for(var c in n){var d=-1!==c.indexOf("&"),f="@"===c[0];if(d||f){if(s=r(l,u,s),d){var h=t(c,l.selector);a||(a=e(u,o)),h=h.replace(vt,a);var p=l.key+"-"+c;"replaceRule"in u?u.replaceRule(p,n[c],m({},s,{selector:h})):u.addRule(p,n[c],m({},s,{selector:h}))}else f&&u.addRule(c,{},s).addRule(l.key,n[c],{selector:l.selector});delete n[c]}}return n}}};function xt(e,t){if(!t)return!0;if(Array.isArray(t)){for(var r=0;r<t.length;r++){if(!xt(e,t[r]))return!1}return!0}if(t.indexOf(" ")>-1)return xt(e,t.split(" "));var n=e.options.parent;if("$"===t[0]){var i=n.getRule(t.substr(1));return!!i&&(i!==e&&(n.classes[e.key]+=" "+n.classes[i.key],!0))}return n.classes[e.key]+=" "+t,!0}const wt=function(){return{onProcessStyle:function(e,t){return"composes"in e?(xt(t,e.composes),delete e.composes,e):e}}};var kt=/[A-Z]/g,St=/^ms-/,Pt={};function Rt(e){return"-"+e.toLowerCase()}const Ot=function(e){if(Pt.hasOwnProperty(e))return Pt[e];var t=e.replace(kt,Rt);return Pt[e]=St.test(t)?"-"+t:t};function Ct(e){var t={};for(var r in e){t[0===r.indexOf("--")?r:Ot(r)]=e[r]}return e.fallbacks&&(Array.isArray(e.fallbacks)?t.fallbacks=e.fallbacks.map(Ct):t.fallbacks=Ct(e.fallbacks)),t}const jt=function(){return{onProcessStyle:function(e){if(Array.isArray(e)){for(var t=0;t<e.length;t++)e[t]=Ct(e[t]);return e}return Ct(e)},onChangeValue:function(e,t,r){if(0===t.indexOf("--"))return e;var n=Ot(t);return t===n?e:(r.prop(n,e),null)}}};var At=Be&&CSS?CSS.px:"px",Tt=Be&&CSS?CSS.ms:"ms",Mt=Be&&CSS?CSS.percent:"%";function Et(e){var t=/(-[a-z])/g,r=function(e){return e[1].toUpperCase()},n={};for(var i in e)n[i]=e[i],n[i.replace(t,r)]=e[i];return n}var It=Et({"animation-delay":Tt,"animation-duration":Tt,"background-position":At,"background-position-x":At,"background-position-y":At,"background-size":At,border:At,"border-bottom":At,"border-bottom-left-radius":At,"border-bottom-right-radius":At,"border-bottom-width":At,"border-left":At,"border-left-width":At,"border-radius":At,"border-right":At,"border-right-width":At,"border-top":At,"border-top-left-radius":At,"border-top-right-radius":At,"border-top-width":At,"border-width":At,"border-block":At,"border-block-end":At,"border-block-end-width":At,"border-block-start":At,"border-block-start-width":At,"border-block-width":At,"border-inline":At,"border-inline-end":At,"border-inline-end-width":At,"border-inline-start":At,"border-inline-start-width":At,"border-inline-width":At,"border-start-start-radius":At,"border-start-end-radius":At,"border-end-start-radius":At,"border-end-end-radius":At,margin:At,"margin-bottom":At,"margin-left":At,"margin-right":At,"margin-top":At,"margin-block":At,"margin-block-end":At,"margin-block-start":At,"margin-inline":At,"margin-inline-end":At,"margin-inline-start":At,padding:At,"padding-bottom":At,"padding-left":At,"padding-right":At,"padding-top":At,"padding-block":At,"padding-block-end":At,"padding-block-start":At,"padding-inline":At,"padding-inline-end":At,"padding-inline-start":At,"mask-position-x":At,"mask-position-y":At,"mask-size":At,height:At,width:At,"min-height":At,"max-height":At,"min-width":At,"max-width":At,bottom:At,left:At,top:At,right:At,inset:At,"inset-block":At,"inset-block-end":At,"inset-block-start":At,"inset-inline":At,"inset-inline-end":At,"inset-inline-start":At,"box-shadow":At,"text-shadow":At,"column-gap":At,"column-rule":At,"column-rule-width":At,"column-width":At,"font-size":At,"font-size-delta":At,"letter-spacing":At,"text-decoration-thickness":At,"text-indent":At,"text-stroke":At,"text-stroke-width":At,"word-spacing":At,motion:At,"motion-offset":At,outline:At,"outline-offset":At,"outline-width":At,perspective:At,"perspective-origin-x":Mt,"perspective-origin-y":Mt,"transform-origin":Mt,"transform-origin-x":Mt,"transform-origin-y":Mt,"transform-origin-z":Mt,"transition-delay":Tt,"transition-duration":Tt,"vertical-align":At,"flex-basis":At,"shape-margin":At,size:At,gap:At,grid:At,"grid-gap":At,"row-gap":At,"grid-row-gap":At,"grid-column-gap":At,"grid-template-rows":At,"grid-template-columns":At,"grid-auto-rows":At,"grid-auto-columns":At,"box-shadow-x":At,"box-shadow-y":At,"box-shadow-blur":At,"box-shadow-spread":At,"font-line-height":At,"text-shadow-x":At,"text-shadow-y":At,"text-shadow-blur":At});function Nt(e,t,r){if(null==t)return t;if(Array.isArray(t))for(var n=0;n<t.length;n++)t[n]=Nt(e,t[n],r);else if("object"==typeof t)if("fallbacks"===e)for(var i in t)t[i]=Nt(i,t[i],r);else for(var o in t)t[o]=Nt(e+"-"+o,t[o],r);else if("number"==typeof t&&!1===isNaN(t)){var s=r[e]||It[e];return!s||0===t&&s===At?t.toString():"function"==typeof s?s(t).toString():""+t+s}return t}const zt=function(e){void 0===e&&(e={});var t=Et(e);return{onProcessStyle:function(e,r){if("style"!==r.type)return e;for(var n in e)e[n]=Nt(n,e[n],t);return e},onChangeValue:function(e,r){return Nt(r,e,t)}}};var $t={"background-size":!0,"background-position":!0,border:!0,"border-bottom":!0,"border-left":!0,"border-top":!0,"border-right":!0,"border-radius":!0,"border-image":!0,"border-width":!0,"border-style":!0,"border-color":!0,"box-shadow":!0,flex:!0,margin:!0,padding:!0,outline:!0,"transform-origin":!0,transform:!0,transition:!0},Dt={position:!0,size:!0},Wt={padding:{top:0,right:0,bottom:0,left:0},margin:{top:0,right:0,bottom:0,left:0},background:{attachment:null,color:null,image:null,position:null,repeat:null},border:{width:null,style:null,color:null},"border-top":{width:null,style:null,color:null},"border-right":{width:null,style:null,color:null},"border-bottom":{width:null,style:null,color:null},"border-left":{width:null,style:null,color:null},outline:{width:null,style:null,color:null},"list-style":{type:null,position:null,image:null},transition:{property:null,duration:null,"timing-function":null,timingFunction:null,delay:null},animation:{name:null,duration:null,"timing-function":null,timingFunction:null,delay:null,"iteration-count":null,iterationCount:null,direction:null,"fill-mode":null,fillMode:null,"play-state":null,playState:null},"box-shadow":{x:0,y:0,blur:0,spread:0,color:null,inset:null},"text-shadow":{x:0,y:0,blur:null,color:null}},Ft={border:{radius:"border-radius",image:"border-image",width:"border-width",style:"border-style",color:"border-color"},"border-bottom":{width:"border-bottom-width",style:"border-bottom-style",color:"border-bottom-color"},"border-top":{width:"border-top-width",style:"border-top-style",color:"border-top-color"},"border-left":{width:"border-left-width",style:"border-left-style",color:"border-left-color"},"border-right":{width:"border-right-width",style:"border-right-style",color:"border-right-color"},background:{size:"background-size",image:"background-image"},font:{style:"font-style",variant:"font-variant",weight:"font-weight",stretch:"font-stretch",size:"font-size",family:"font-family",lineHeight:"line-height","line-height":"line-height"},flex:{grow:"flex-grow",basis:"flex-basis",direction:"flex-direction",wrap:"flex-wrap",flow:"flex-flow",shrink:"flex-shrink"},align:{self:"align-self",items:"align-items",content:"align-content"},grid:{"template-columns":"grid-template-columns",templateColumns:"grid-template-columns","template-rows":"grid-template-rows",templateRows:"grid-template-rows","template-areas":"grid-template-areas",templateAreas:"grid-template-areas",template:"grid-template","auto-columns":"grid-auto-columns",autoColumns:"grid-auto-columns","auto-rows":"grid-auto-rows",autoRows:"grid-auto-rows","auto-flow":"grid-auto-flow",autoFlow:"grid-auto-flow",row:"grid-row",column:"grid-column","row-start":"grid-row-start",rowStart:"grid-row-start","row-end":"grid-row-end",rowEnd:"grid-row-end","column-start":"grid-column-start",columnStart:"grid-column-start","column-end":"grid-column-end",columnEnd:"grid-column-end",area:"grid-area",gap:"grid-gap","row-gap":"grid-row-gap",rowGap:"grid-row-gap","column-gap":"grid-column-gap",columnGap:"grid-column-gap"}};function Ht(e,t,r,n){return null==r[t]?e:0===e.length?[]:Array.isArray(e[0])?Ht(e[0],t,r,n):"object"==typeof e[0]?function(e,t,r){return e.map((function(e){return Lt(e,t,r,!1,!0)}))}(e,t,n):[e]}function Lt(e,t,r,n,i){if(!Wt[t]&&!Ft[t])return[];var o=[];if(Ft[t]&&(e=function(e,t,r,n){for(var i in r){var o=r[i];if(void 0!==e[i]&&(n||!t.prop(o))){var s,a=Vt((s={},s[o]=e[i],s),t)[o];n?t.style.fallbacks[o]=a:t.style[o]=a}delete e[i]}return e}(e,r,Ft[t],n)),Object.keys(e).length)for(var s in Wt[t])e[s]?Array.isArray(e[s])?o.push(null===Dt[s]?e[s]:e[s].join(" ")):o.push(e[s]):null!=Wt[t][s]&&o.push(Wt[t][s]);return!o.length||i?o:[o]}function Vt(e,t,r){for(var n in e){var i=e[n];if(Array.isArray(i)){if(!Array.isArray(i[0])){if("fallbacks"===n){for(var o=0;o<e.fallbacks.length;o++)e.fallbacks[o]=Vt(e.fallbacks[o],t,!0);continue}e[n]=Ht(i,n,$t,t),e[n].length||delete e[n]}}else if("object"==typeof i){if("fallbacks"===n){e.fallbacks=Vt(e.fallbacks,t,!0);continue}e[n]=Lt(i,n,t,r),e[n].length||delete e[n]}else""===e[n]&&delete e[n]}return e}const Ut=function(){return{onProcessStyle:function(e,t){if(!e||"style"!==t.type)return e;if(Array.isArray(e)){for(var r=0;r<e.length;r++)e[r]=Vt(e[r],t);return e}return Vt(e,t)}}};function qt(r){return function(t){if(Array.isArray(t))return e(t)}(r)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(r)||t(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var Gt="",_t="",Bt="",Xt="",Yt=T&&"ontouchstart"in document.documentElement;if(T){var Zt={Moz:"-moz-",ms:"-ms-",O:"-o-",Webkit:"-webkit-"},Jt=document.createElement("p").style;for(var Kt in Zt)if(Kt+"Transform"in Jt){Gt=Kt,_t=Zt[Kt];break}"Webkit"===Gt&&"msHyphens"in Jt&&(Gt="ms",_t=Zt.ms,Xt="edge"),"Webkit"===Gt&&"-apple-trailing-word"in Jt&&(Bt="apple")}var Qt=Gt,er=_t,tr=Bt,rr=Xt,nr=Yt;var ir={noPrefill:["appearance"],supportedProperty:function(e){return"appearance"===e&&("ms"===Qt?"-webkit-"+e:er+e)}},or={noPrefill:["color-adjust"],supportedProperty:function(e){return"color-adjust"===e&&("Webkit"===Qt?er+"print-"+e:e)}},sr=/[-\s]+(.)?/g;function ar(e,t){return t?t.toUpperCase():""}function lr(e){return e.replace(sr,ar)}function ur(e){return lr("-"+e)}var cr,dr={noPrefill:["mask"],supportedProperty:function(e,t){if(!/^mask/.test(e))return!1;if("Webkit"===Qt){var r="mask-image";if(lr(r)in t)return e;if(Qt+ur(r)in t)return er+e}return e}},fr={noPrefill:["text-orientation"],supportedProperty:function(e){return"text-orientation"===e&&("apple"!==tr||nr?e:er+e)}},hr={noPrefill:["transform"],supportedProperty:function(e,t,r){return"transform"===e&&(r.transform?e:er+e)}},pr={noPrefill:["transition"],supportedProperty:function(e,t,r){return"transition"===e&&(r.transition?e:er+e)}},yr={noPrefill:["writing-mode"],supportedProperty:function(e){return"writing-mode"===e&&("Webkit"===Qt||"ms"===Qt&&"edge"!==rr?er+e:e)}},gr={noPrefill:["user-select"],supportedProperty:function(e){return"user-select"===e&&("Moz"===Qt||"ms"===Qt||"apple"===tr?er+e:e)}},mr={supportedProperty:function(e,t){return!!/^break-/.test(e)&&("Webkit"===Qt?"WebkitColumn"+ur(e)in t&&er+"column-"+e:"Moz"===Qt&&("page"+ur(e)in t&&"page-"+e))}},vr={supportedProperty:function(e,t){if(!/^(border|margin|padding)-inline/.test(e))return!1;if("Moz"===Qt)return e;var r=e.replace("-inline","");return Qt+ur(r)in t&&er+r}},br={supportedProperty:function(e,t){return lr(e)in t&&e}},xr={supportedProperty:function(e,t){var r=ur(e);return"-"===e[0]||"-"===e[0]&&"-"===e[1]?e:Qt+r in t?er+e:"Webkit"!==Qt&&"Webkit"+r in t&&"-webkit-"+e}},wr={supportedProperty:function(e){return"scroll-snap"===e.substring(0,11)&&("ms"===Qt?""+er+e:e)}},kr={supportedProperty:function(e){return"overscroll-behavior"===e&&("ms"===Qt?er+"scroll-chaining":e)}},Sr={"flex-grow":"flex-positive","flex-shrink":"flex-negative","flex-basis":"flex-preferred-size","justify-content":"flex-pack",order:"flex-order","align-items":"flex-align","align-content":"flex-line-pack"},Pr={supportedProperty:function(e,t){var r=Sr[e];return!!r&&(Qt+ur(r)in t&&er+r)}},Rr={flex:"box-flex","flex-grow":"box-flex","flex-direction":["box-orient","box-direction"],order:"box-ordinal-group","align-items":"box-align","flex-flow":["box-orient","box-direction"],"justify-content":"box-pack"},Or=Object.keys(Rr),Cr=function(e){return er+e},jr={supportedProperty:function(e,t,r){var n=r.multiple;if(Or.indexOf(e)>-1){var i=Rr[e];if(!Array.isArray(i))return Qt+ur(i)in t&&er+i;if(!n)return!1;for(var o=0;o<i.length;o++)if(!(Qt+ur(i[0])in t))return!1;return i.map(Cr)}return!1}},Ar=[ir,or,dr,fr,hr,pr,yr,gr,mr,vr,br,xr,wr,kr,Pr,jr],Tr=Ar.filter((function(e){return e.supportedProperty})).map((function(e){return e.supportedProperty})),Mr=Ar.filter((function(e){return e.noPrefill})).reduce((function(e,t){return e.push.apply(e,qt(t.noPrefill)),e}),[]),Er={};if(T){cr=document.createElement("p");var Ir=window.getComputedStyle(document.documentElement,"");for(var Nr in Ir)isNaN(Nr)||(Er[Ir[Nr]]=Ir[Nr]);Mr.forEach((function(e){return delete Er[e]}))}function zr(e,t){if(void 0===t&&(t={}),!cr)return e;if(null!=Er[e])return Er[e];"transition"!==e&&"transform"!==e||(t[e]=e in cr.style);for(var r=0;r<Tr.length&&(Er[e]=Tr[r](e,cr.style,t),!Er[e]);r++);try{cr.style[e]=""}catch(e){return!1}return Er[e]}var $r,Dr={},Wr={transition:1,"transition-property":1,"-webkit-transition":1,"-webkit-transition-property":1},Fr=/(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g;function Hr(e,t,r){if("var"===t)return"var";if("all"===t)return"all";if("all"===r)return", all";var n=t?zr(t):", "+zr(r);return n||(t||r)}function Lr(e,t){var r=t;if(!$r||"content"===e)return t;if("string"!=typeof r||!isNaN(parseInt(r,10)))return r;var n=e+r;if(null!=Dr[n])return Dr[n];try{$r.style[e]=r}catch(e){return Dr[n]=!1,!1}if(Wr[e])r=r.replace(Fr,Hr);else if(""===$r.style[e]&&("-ms-flex"===(r=er+r)&&($r.style[e]="-ms-flexbox"),$r.style[e]=r,""===$r.style[e]))return Dr[n]=!1,!1;return $r.style[e]="",Dr[n]=r,Dr[n]}T&&($r=document.createElement("p"));const Vr=function(){function e(t){for(var r in t){var n=t[r];if("fallbacks"===r&&Array.isArray(n))t[r]=n.map(e);else{var i=!1,o=zr(r);o&&o!==r&&(i=!0);var s=!1,a=Lr(o,L(n));a&&a!==n&&(s=!0),(i||s)&&(i&&delete t[r],t[o||r]=a||n)}}return t}return{onProcessRule:function(e){if("keyframes"===e.type){var t=e;t.at=function(e){return"-"===e[1]||"ms"===Qt?e:"@"+er+"keyframes"+e.substr(10)}(t.at)}},onProcessStyle:function(t,r){return"style"!==r.type?t:e(t)},onChangeValue:function(e,t){return Lr(t,L(e))||e}}};const Ur=function(){var e=function(e,t){return e.length===t.length?e>t?1:-1:e.length-t.length};return{onProcessStyle:function(t,r){if("style"!==r.type)return t;for(var n={},i=Object.keys(t).sort(e),o=0;o<i.length;o++)n[i[o]]=t[i[o]];return n}}};const qr=function(e){return void 0===e&&(e={}),{plugins:[Ke(),tt(e.observable),it(),dt(),yt(),bt(),wt(),jt(),zt(e.defaultUnit),Ut(),Vr(),Ur()]}};const Gr=function(e){var t={};return function(r){return void 0===t[r]&&(t[r]=e(r)),t[r]}};var _r=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|default|defer|dir|disabled|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|itemProp|itemScope|itemType|itemID|itemRef|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;Gr((function(e){return _r.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91}));var Br=Ge(qr()),Xr=function(e){void 0===e&&(e=Br);var t,r=new Map,n=0,i=function(){return(!t||t.rules.index.length>1e4)&&(t=e.createStyleSheet().attach()),t};function o(){var e=arguments,t=JSON.stringify(e),o=r.get(t);if(o)return o.className;var s=[];for(var a in e){var l=e[a];if(Array.isArray(l))for(var u=0;u<l.length;u++)s.push(l[u]);else s.push(l)}for(var c={},d=[],f=0;f<s.length;f++){var h=s[f];if(h){var p=h;if("string"==typeof h){var y=r.get(h);y&&(y.labels.length&&d.push.apply(d,y.labels),p=y.style)}p.label&&-1===d.indexOf(p.label)&&d.push(p.label),Object.assign(c,p)}}delete c.label;var g=0===d.length?"css":d.join("-"),m=g+"-"+n++;i().addRule(m,c);var v=i().classes[m],b={style:c,labels:d,className:v};return r.set(t,b),r.set(v,b),v}return o.getSheet=i,o}();const Yr=Xr;var Zr=Number.MIN_SAFE_INTEGER||-1e9,Jr=function(){return Zr++},Kr=(0,o.createContext)({classNamePrefix:"",disableStylesGeneration:!1}),Qr=new Map,en=function(e,t){var r=e.managers;if(r)return r[t]||(r[t]=new _e),r[t];var n=Qr.get(t);return n||(n=new _e,Qr.set(t,n)),n},tn=Ge(qr()),rn=new WeakMap,nn=function(e){return rn.get(e)};var on=function(e){if(!e.context.disableStylesGeneration){var t=en(e.context,e.index),r=t.get(e.theme);if(r)return r;var n=e.context.jss||tn,i=function(e){var t=e.styles;return"function"!=typeof t?t:t(e.theme)}(e),o=Xe(i),s=n.createStyleSheet(i,function(e,t){var r;e.context.id&&null!=e.context.id.minify&&(r=e.context.id.minify);var n=e.context.classNamePrefix||"";e.name&&!r&&(n+=e.name.replace(/\s/g,"-")+"-");var i="";return e.name&&(i=e.name+", "),i+="function"==typeof e.styles?"Themed":"Unthemed",m({},e.sheetOptions,{index:e.index,meta:i,classNamePrefix:n,link:t,generateId:e.sheetOptions&&e.sheetOptions.generateId?e.sheetOptions.generateId:e.context.generateId})}(e,null!==o));return function(e,t){rn.set(e,t)}(s,{dynamicStyles:o,styles:i}),t.add(e.theme,s),s}},sn=T?o.useLayoutEffect:o.useEffect,an={},ln=function(e,t){void 0===t&&(t={});var r=t,n=r.index,i=void 0===n?Jr():n,s=r.theming,a=r.name,l=v(r,["index","theming","name"]),u=s&&s.context||j,c={};return function(t){var r=(0,o.useRef)(!0),n=(0,o.useContext)(Kr),s=function(t){return"function"==typeof e&&(t||(0,o.useContext)(u))||an}(t&&t.theme),d=(0,o.useMemo)((function(){var r=on({context:n,styles:e,name:a,theme:s,index:i,sheetOptions:l}),o=r?function(e,t){var r=nn(e);if(r){var n={};for(var i in r.dynamicStyles)for(var o=e.rules.index.length,s=e.addRule(i,r.dynamicStyles[i]),a=o;a<e.rules.index.length;a++){var l=e.rules.index[a];e.updateOne(l,t),n[s===l?i:l.key]=l}return n}}(r,t):null;return r&&function(e){var t=e.sheet,r=e.context,n=e.index,i=e.theme;t&&(en(r,n).manage(i),r.registry&&r.registry.add(t))}({index:i,context:n,sheet:r,theme:s}),[r,o]}),[n,s]),f=d[0],h=d[1];sn((function(){f&&h&&!r.current&&function(e,t,r){for(var n in r)t.updateOne(r[n],e)}(t,f,h)}),[t]),sn((function(){return function(){f&&function(e){e.sheet&&en(e.context,e.index).unmanage(e.theme)}({index:i,context:n,sheet:f,theme:s}),f&&h&&function(e,t){for(var r in t)e.deleteRule(t[r])}(f,h)}}),[f]);var p=(0,o.useMemo)((function(){return f&&h?function(e,t){if(!t)return e.classes;var r=nn(e);if(!r)return e.classes;var n={};for(var i in r.styles)n[i]=e.classes[i],i in t&&(n[i]+=" "+e.classes[t[i].key]);return n}(f,h):c}),[f,h]);return(0,o.useDebugValue)(p),(0,o.useDebugValue)(s===an?"No theme":s),(0,o.useEffect)((function(){r.current=!1})),p}};Symbol("react-jss-styled"),function(e){void 0===e&&(e=Yr)}();ln({NoData:{position:"sticky",left:0,top:0,width:function(e){var t=e.width;return"".concat(t,"px")},height:function(e){var t=e.height;return"".concat(t,"px")},display:"flex",alignItems:"center",justifyContent:"center"},Td:{padding:"0px"}});const un=ln({Filler:function(e){return{display:"block",height:e.height,width:e.width}}});const cn=function(e){var t=e.width,r=e.height,n=un({width:t,height:r});return s().createElement("div",{className:n.Filler})};const dn=ln({GridContainer:function(e){var t=e.height,r=e.width;return{maxWidth:"".concat(r,"px"),width:"".concat(r,"px"),height:"".concat(t,"px"),display:"flex",flexDirection:"row",flexWrap:"wrap",overflow:"scroll",scrollBehavior:"smooth",padding:0,margin:0}},Item:function(e){var t=e.itemWidth,r=e.itemHeight;return{maxWidth:"".concat(t,"px"),width:"".concat(t,"px"),height:"".concat(r,"px"),scrollBehavior:"smooth",padding:0,margin:0}}});const fn=function(){var e,t,r,n,i=(0,o.useContext)(a),l=i.state,u=i.dispatch,c=l.data,d=l.dimensions,f=d.height,h=d.width,p=d.itemHeight,y=d.itemWidth,g=l.Item,m=l.virtual,v=m.topFillerHeight,b=m.bottomFillerHeight,x=m.dataHeight,w=m.scrollTop,k=l.debounceTimes.scrolling,S=l.rhgID,P=dn({width:h,height:f,itemHeight:p,itemWidth:y}),R=(0,o.useCallback)((e=function(e){e.preventDefault(),e.stopPropagation();var t=e.target.scrollTop;u({type:"scroll",payload:t>0?t:0})},t=k,n=!0,function(){for(var i=arguments.length,o=new Array(i),s=0;s<i;s++)o[s]=arguments[s];clearTimeout(r),r=setTimeout((function(){n&&(e.apply(void 0,o),n=!1,setTimeout((function(){return n=!0}),t))}),t)}),[]),O=(0,o.useCallback)((function(e){Math.abs(e.target.scrollTop-w)>x/4&&u({type:"loading"}),R(e)}),[x,u,R,w]);return s().createElement("div",{className:P.GridContainer,onScroll:O},s().createElement(cn,{width:"100%",height:v}),c.map((function(e){return s().createElement("div",{key:e[S],className:P.Item},s().createElement(g,e))})),s().createElement(cn,{width:"100%",height:b}))},hn=ln({Wrapper:function(e){var t=e.width;return{height:e.height,width:t,backgroundColor:"white",overflow:"hidden",position:"relative"}},LoaderContainer:{position:"absolute",top:0,left:0,width:"100%",height:"100%"}}),pn=function(e){var t=e.config,n=g(),i=n.reducer,l=n.init,u=r((0,o.useReducer)(i,t,l),2),c=u[0],d=u[1],f=c.dimensions,h=f.width,p=f.height,y=c.Loader,m=c.virtual.loading,v=hn({width:h,height:p});return s().createElement("div",{className:[v.Wrapper].join(" ")},s().createElement(a.Provider,{value:{state:c,dispatch:d}},m&&s().createElement("div",{className:v.LoaderContainer},s().createElement(y,null)),s().createElement(fn,null)))}})(),i})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,