/*! For license information please see index.js.LICENSE.txt */
!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t(require("react"));else if("function"==typeof define&&define.amd)define(["react"],t);else{var r="object"==typeof exports?t(require("react")):t(e.React);for(var n in r)("object"==typeof exports?exports:e)[n]=r[n]}}(self,(e=>(()=>{"use strict";var t={679:(e,t,r)=>{var n=r(864),i={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},s={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},a={};function l(e){return n.isMemo(e)?s:a[e.$$typeof]||i}a[n.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},a[n.Memo]=s;var u=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,h=Object.getPrototypeOf,p=Object.prototype;e.exports=function e(t,r,n){if("string"!=typeof r){if(p){var i=h(r);i&&i!==p&&e(t,i,n)}var s=c(r);f&&(s=s.concat(f(r)));for(var a=l(t),y=l(r),m=0;m<s.length;++m){var g=s[m];if(!(o[g]||n&&n[g]||y&&y[g]||a&&a[g])){var v=d(r,g);try{u(t,g,v)}catch(e){}}}}return t}},914:(e,t)=>{},921:(e,t)=>{var r="function"==typeof Symbol&&Symbol.for,n=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,o=r?Symbol.for("react.fragment"):60107,s=r?Symbol.for("react.strict_mode"):60108,a=r?Symbol.for("react.profiler"):60114,l=r?Symbol.for("react.provider"):60109,u=r?Symbol.for("react.context"):60110,c=r?Symbol.for("react.async_mode"):60111,f=r?Symbol.for("react.concurrent_mode"):60111,d=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,p=r?Symbol.for("react.suspense_list"):60120,y=r?Symbol.for("react.memo"):60115,m=r?Symbol.for("react.lazy"):60116,g=r?Symbol.for("react.block"):60121,v=r?Symbol.for("react.fundamental"):60117,b=r?Symbol.for("react.responder"):60118,x=r?Symbol.for("react.scope"):60119;function w(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case n:switch(e=e.type){case c:case f:case o:case a:case s:case h:return e;default:switch(e=e&&e.$$typeof){case u:case d:case m:case y:case l:return e;default:return t}}case i:return t}}}function k(e){return w(e)===f}t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=u,t.ContextProvider=l,t.Element=n,t.ForwardRef=d,t.Fragment=o,t.Lazy=m,t.Memo=y,t.Portal=i,t.Profiler=a,t.StrictMode=s,t.Suspense=h,t.isAsyncMode=function(e){return k(e)||w(e)===c},t.isConcurrentMode=k,t.isContextConsumer=function(e){return w(e)===u},t.isContextProvider=function(e){return w(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===n},t.isForwardRef=function(e){return w(e)===d},t.isFragment=function(e){return w(e)===o},t.isLazy=function(e){return w(e)===m},t.isMemo=function(e){return w(e)===y},t.isPortal=function(e){return w(e)===i},t.isProfiler=function(e){return w(e)===a},t.isStrictMode=function(e){return w(e)===s},t.isSuspense=function(e){return w(e)===h},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===f||e===a||e===s||e===h||e===p||"object"==typeof e&&null!==e&&(e.$$typeof===m||e.$$typeof===y||e.$$typeof===l||e.$$typeof===u||e.$$typeof===d||e.$$typeof===v||e.$$typeof===b||e.$$typeof===x||e.$$typeof===g)},t.typeOf=w},864:(e,t,r)=>{e.exports=r(921)},121:(e,t,r)=>{r.d(t,{Z:()=>n}),e=r.hmd(e);const n=function(e){var t,r=e.Symbol;return"function"==typeof r?r.observable?t=r.observable:(t=r("observable"),r.observable=t):t="@@observable",t}("undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==r.g?r.g:e)},787:t=>{t.exports=e}},r={};function n(e){var i=r[e];if(void 0!==i)return i.exports;var o=r[e]={id:e,loaded:!1,exports:{}};return t[e](o,o.exports,n),o.loaded=!0,o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var i={};return(()=>{function e(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function t(t,r){if(t){if("string"==typeof t)return e(t,r);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?e(t,r):void 0}}function r(e,r){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,i,o=[],s=!0,a=!1;try{for(r=r.call(e);!(s=(n=r.next()).done)&&(o.push(n.value),!t||o.length!==t);s=!0);}catch(e){a=!0,i=e}finally{try{s||null==r.return||r.return()}finally{if(a)throw i}}return o}}(e,r)||t(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}n.r(i),n.d(i,{default:()=>mn});var o=n(787),s=n.n(o);const a=(0,o.createContext)();function l(r){return function(t){if(Array.isArray(t))return e(t)}(r)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(r)||t(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function u(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var c=function(e){return"function"==typeof e},f=function(e,t){var r,n=!0;return function(){for(var i=arguments.length,o=new Array(i),s=0;s<i;s++)o[s]=arguments[s];clearTimeout(r),r=setTimeout((function(){n&&(e.apply(void 0,o),n=!1,setTimeout((function(){return n=!0}),t))}),t)}};function d(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function h(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?d(Object(r),!0).forEach((function(t){u(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):d(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var p=0,y={toString:function(){return"HYG_"+(p+=1)}},m=function(e){var t=e.scrollTop,r=e.dimensions,n=e.size,i=e.lineGap,o=r.height,s=r.itemHeight,a=r.width,l=r.itemWidth,u=Math.floor(a/l),c=Math.ceil(n/u),f=c*s,d=t>(i+1)*s,h=Math.max(0,Math.floor(t/s)-i),p=h*s,y=2*i+Math.ceil(o/s),m=y*s,g=d?h*u:0;return{fromItem:g,toItem:d?g+u*y:y*u,carpetHeight:f,topFillerHeight:p,bottomFillerHeight:Math.max(f-p-m,0),linesToRender:y,dataHeight:m,loading:!1,lines:c,columns:u,scrollTop:t}},g=function(e,t){var r=t.payload,n=void 0===r?{}:r,i=t.type,o=e.dimensions,s=e.originalData,a=e.filteredData,l=e.virtual,c=e.virtual,f=c.lineGap,d=c.scrollTop,p=e.filters,y=e.fields,g={loading:function(){return{virtual:h(h({},l),{},{loading:!0})}},filter:function(){var e=n.value,t=n.field;if(t&&t in p)return{filters:h(h({},p),{},u({},t,{filter:p[t].filter,value:e})),data:s.filter((function(r){return p[t].filter({userValue:e,row:r})}))};var r=s.filter((function(t){return t.key in p?p[t.key]({userValue:e,row:t}):y.some((function(r){return"".concat(t[r]).includes(e)}))})),i=m({dimensions:o,size:r.length,scrollTop:d,lineGap:f}),a=i.fromItem,c=i.toItem;return{filteredData:r,data:r.slice(a,c),globalFilterValue:e,virtual:h(h({},l),i)}},unfilter:function(){var e=m({dimensions:o,size:s.length,scrollTop:d,lineGap:f}),t=e.fromItem,r=e.toItem;return{filteredData:s,data:s.slice(t,r),virtual:h(h({},l),e)}},scroll:function(){var e=parseInt(n,10),t=m({dimensions:o,size:a.length,scrollTop:e,lineGap:f}),r=t.fromItem,i=t.toItem;return{data:a.slice(r,i),virtual:h(h({},l),t)}}};return i in g?h(h({},e),g[i]()):e},v=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.data,r=void 0===t?[]:t,n=e.lineGap,i=void 0===n?2:n,o=e.Loader,a=void 0===o?function(){return s().createElement("div",null,"loading")}:o,f=e.dimensions,d=(f=void 0===f?{}:f).width,p=void 0===d?1200:d,g=f.height,v=void 0===g?800:g,b=f.itemHeight,x=void 0===b?150:b,w=f.itemWidth,k=void 0===w?200:w,S=e.rhgID,P=void 0===S?"_ID":S,R=e.debounceTimes,C=(R=void 0===R?{}:R).scrolling,O=void 0===C?50:C,j=R.filtering,A=void 0===j?50:j,T=e.headerCaption,I=(T=void 0===T?{}:T).Component,E=void 0===I?null:I,M=T.height,N=void 0===M?0:M,H=e.footerCaption,z=(H=void 0===H?{}:H).Component,$=void 0===z?null:z,D=H.height,F=void 0===D?0:D,L=e.events,V=(L=void 0===L?{}:L).onItemEnter,W=L.onItemLeave,G=L.onItemClick,U=e.filters,q=void 0===U?{}:U,_={width:p,height:v,itemHeight:x,itemWidth:k},B=r.map((function(e){return h(u({},P,"".concat(y)),e)})),X=m({dimensions:_,size:B.length,scrollTop:0,lineGap:i}),Y=h({loading:!1,lineGap:i},X),Z=X.fromItem,J=X.toItem,K=Object.keys(q).reduce((function(e,t){return c(q[t])&&(e[t]={filter:q[t],value:""}),e}),{}),Q=Object.keys(r[0]);return h(h({},e),{},{rhgID:P,originalData:B,filteredData:l(B),data:B.slice(Z,J),fields:Q,Loader:a,header:{HeaderCaptionComponent:E,headerCaptionHeight:N},footer:{FooterCaptionComponent:$,footerCaptionHeight:F},dimensions:_,virtual:Y,debounceTimes:{scrolling:O,filtering:A},events:{onItemEnter:V,onItemLeave:W,onItemClick:G},filters:K,globalFilterValue:""})};const b=function(){return{reducer:g,init:v}};function x(){return x=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},x.apply(this,arguments)}function w(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}var k=n(679),S=n.n(k);n(914);function P(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function R(){return R=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},R.apply(this,arguments)}function C(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function O(e){var t=function(t){var r,n;function i(){for(var r,n=arguments.length,i=new Array(n),o=0;o<n;o++)i[o]=arguments[o];return P(C(C(r=t.call.apply(t,[this].concat(i))||this)),"cachedTheme",void 0),P(C(C(r)),"lastOuterTheme",void 0),P(C(C(r)),"lastTheme",void 0),P(C(C(r)),"renderProvider",(function(t){var n=r.props.children;return s().createElement(e.Provider,{value:r.getTheme(t)},n)})),r}n=t,(r=i).prototype=Object.create(n.prototype),r.prototype.constructor=r,r.__proto__=n;var o=i.prototype;return o.getTheme=function(e){if(this.props.theme!==this.lastTheme||e!==this.lastOuterTheme||!this.cachedTheme)if(this.lastOuterTheme=e,this.lastTheme=this.props.theme,"function"==typeof this.lastTheme){var t=this.props.theme;this.cachedTheme=t(e)}else{var r=this.props.theme;this.cachedTheme=e?R({},e,r):r}return this.cachedTheme},o.render=function(){return this.props.children?s().createElement(e.Consumer,null,this.renderProvider):null},i}(s().Component);return t}function j(e){return function(t){var r=s().forwardRef((function(r,n){return s().createElement(e.Consumer,null,(function(e){return s().createElement(t,R({theme:e,ref:n},r))}))}));return S()(r,t),r}}function A(e){return function(){return s().useContext(e)}}var T,I=(0,o.createContext)(),E=(T=I,j(T),A(T),O(T),"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e});const M="object"===("undefined"==typeof window?"undefined":E(window))&&"object"===("undefined"==typeof document?"undefined":E(document))&&9===document.nodeType;const N=function(e,t){};function H(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function z(e,t,r){return t&&H(e.prototype,t),r&&H(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}function $(e,t){return $=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},$(e,t)}function D(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,$(e,t)}function F(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var L={}.constructor;function V(e){if(null==e||"object"!=typeof e)return e;if(Array.isArray(e))return e.map(V);if(e.constructor!==L)return e;var t={};for(var r in e)t[r]=V(e[r]);return t}function W(e,t,r){void 0===e&&(e="unnamed");var n=r.jss,i=V(t),o=n.plugins.onCreateRule(e,i,r);return o||(e[0],null)}var G=function(e,t){for(var r="",n=0;n<e.length&&"!important"!==e[n];n++)r&&(r+=t),r+=e[n];return r},U=function(e,t){if(void 0===t&&(t=!1),!Array.isArray(e))return e;var r="";if(Array.isArray(e[0]))for(var n=0;n<e.length&&"!important"!==e[n];n++)r&&(r+=", "),r+=G(e[n]," ");else r=G(e,", ");return t||"!important"!==e[e.length-1]||(r+=" !important"),r};function q(e){return e&&!1===e.format?{linebreak:"",space:""}:{linebreak:"\n",space:" "}}function _(e,t){for(var r="",n=0;n<t;n++)r+="  ";return r+e}function B(e,t,r){void 0===r&&(r={});var n="";if(!t)return n;var i=r.indent,o=void 0===i?0:i,s=t.fallbacks;!1===r.format&&(o=-1/0);var a=q(r),l=a.linebreak,u=a.space;if(e&&o++,s)if(Array.isArray(s))for(var c=0;c<s.length;c++){var f=s[c];for(var d in f){var h=f[d];null!=h&&(n&&(n+=l),n+=_(d+":"+u+U(h)+";",o))}}else for(var p in s){var y=s[p];null!=y&&(n&&(n+=l),n+=_(p+":"+u+U(y)+";",o))}for(var m in t){var g=t[m];null!=g&&"fallbacks"!==m&&(n&&(n+=l),n+=_(m+":"+u+U(g)+";",o))}return(n||r.allowEmpty)&&e?(n&&(n=""+l+n+l),_(""+e+u+"{"+n,--o)+_("}",o)):n}var X=/([[\].#*$><+~=|^:(),"'`\s])/g,Y="undefined"!=typeof CSS&&CSS.escape,Z=function(e){return Y?Y(e):e.replace(X,"\\$1")},J=function(){function e(e,t,r){this.type="style",this.isProcessed=!1;var n=r.sheet,i=r.Renderer;this.key=e,this.options=r,this.style=t,n?this.renderer=n.renderer:i&&(this.renderer=new i)}return e.prototype.prop=function(e,t,r){if(void 0===t)return this.style[e];var n=!!r&&r.force;if(!n&&this.style[e]===t)return this;var i=t;r&&!1===r.process||(i=this.options.jss.plugins.onChangeValue(t,e,this));var o=null==i||!1===i,s=e in this.style;if(o&&!s&&!n)return this;var a=o&&s;if(a?delete this.style[e]:this.style[e]=i,this.renderable&&this.renderer)return a?this.renderer.removeProperty(this.renderable,e):this.renderer.setProperty(this.renderable,e,i),this;var l=this.options.sheet;return l&&l.attached,this},e}(),K=function(e){function t(t,r,n){var i;i=e.call(this,t,r,n)||this;var o=n.selector,s=n.scoped,a=n.sheet,l=n.generateId;return o?i.selectorText=o:!1!==s&&(i.id=l(F(F(i)),a),i.selectorText="."+Z(i.id)),i}D(t,e);var r=t.prototype;return r.applyTo=function(e){var t=this.renderer;if(t){var r=this.toJSON();for(var n in r)t.setProperty(e,n,r[n])}return this},r.toJSON=function(){var e={};for(var t in this.style){var r=this.style[t];"object"!=typeof r?e[t]=r:Array.isArray(r)&&(e[t]=U(r))}return e},r.toString=function(e){var t=this.options.sheet,r=!!t&&t.options.link?x({},e,{allowEmpty:!0}):e;return B(this.selectorText,this.style,r)},z(t,[{key:"selector",set:function(e){if(e!==this.selectorText){this.selectorText=e;var t=this.renderer,r=this.renderable;if(r&&t)t.setSelector(r,e)||t.replaceRule(r,this)}},get:function(){return this.selectorText}}]),t}(J),Q={onCreateRule:function(e,t,r){return"@"===e[0]||r.parent&&"keyframes"===r.parent.type?null:new K(e,t,r)}},ee={indent:1,children:!0},te=/@([\w-]+)/,re=function(){function e(e,t,r){this.type="conditional",this.isProcessed=!1,this.key=e;var n=e.match(te);for(var i in this.at=n?n[1]:"unknown",this.query=r.name||"@"+this.at,this.options=r,this.rules=new Ce(x({},r,{parent:this})),t)this.rules.add(i,t[i]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.indexOf=function(e){return this.rules.indexOf(e)},t.addRule=function(e,t,r){var n=this.rules.add(e,t,r);return n?(this.options.jss.plugins.onProcessRule(n),n):null},t.replaceRule=function(e,t,r){var n=this.rules.replace(e,t,r);return n&&this.options.jss.plugins.onProcessRule(n),n},t.toString=function(e){void 0===e&&(e=ee);var t=q(e).linebreak;if(null==e.indent&&(e.indent=ee.indent),null==e.children&&(e.children=ee.children),!1===e.children)return this.query+" {}";var r=this.rules.toString(e);return r?this.query+" {"+t+r+t+"}":""},e}(),ne=/@media|@supports\s+/,ie={onCreateRule:function(e,t,r){return ne.test(e)?new re(e,t,r):null}},oe={indent:1,children:!0},se=/@keyframes\s+([\w-]+)/,ae=function(){function e(e,t,r){this.type="keyframes",this.at="@keyframes",this.isProcessed=!1;var n=e.match(se);n&&n[1]?this.name=n[1]:this.name="noname",this.key=this.type+"-"+this.name,this.options=r;var i=r.scoped,o=r.sheet,s=r.generateId;for(var a in this.id=!1===i?this.name:Z(s(this,o)),this.rules=new Ce(x({},r,{parent:this})),t)this.rules.add(a,t[a],x({},r,{parent:this}));this.rules.process()}return e.prototype.toString=function(e){void 0===e&&(e=oe);var t=q(e).linebreak;if(null==e.indent&&(e.indent=oe.indent),null==e.children&&(e.children=oe.children),!1===e.children)return this.at+" "+this.id+" {}";var r=this.rules.toString(e);return r&&(r=""+t+r+t),this.at+" "+this.id+" {"+r+"}"},e}(),le=/@keyframes\s+/,ue=/\$([\w-]+)/g,ce=function(e,t){return"string"==typeof e?e.replace(ue,(function(e,r){return r in t?t[r]:e})):e},fe=function(e,t,r){var n=e[t],i=ce(n,r);i!==n&&(e[t]=i)},de={onCreateRule:function(e,t,r){return"string"==typeof e&&le.test(e)?new ae(e,t,r):null},onProcessStyle:function(e,t,r){return"style"===t.type&&r?("animation-name"in e&&fe(e,"animation-name",r.keyframes),"animation"in e&&fe(e,"animation",r.keyframes),e):e},onChangeValue:function(e,t,r){var n=r.options.sheet;if(!n)return e;switch(t){case"animation":case"animation-name":return ce(e,n.keyframes);default:return e}}},he=function(e){function t(){return e.apply(this,arguments)||this}return D(t,e),t.prototype.toString=function(e){var t=this.options.sheet,r=!!t&&t.options.link?x({},e,{allowEmpty:!0}):e;return B(this.key,this.style,r)},t}(J),pe={onCreateRule:function(e,t,r){return r.parent&&"keyframes"===r.parent.type?new he(e,t,r):null}},ye=function(){function e(e,t,r){this.type="font-face",this.at="@font-face",this.isProcessed=!1,this.key=e,this.style=t,this.options=r}return e.prototype.toString=function(e){var t=q(e).linebreak;if(Array.isArray(this.style)){for(var r="",n=0;n<this.style.length;n++)r+=B(this.at,this.style[n]),this.style[n+1]&&(r+=t);return r}return B(this.at,this.style,e)},e}(),me=/@font-face/,ge={onCreateRule:function(e,t,r){return me.test(e)?new ye(e,t,r):null}},ve=function(){function e(e,t,r){this.type="viewport",this.at="@viewport",this.isProcessed=!1,this.key=e,this.style=t,this.options=r}return e.prototype.toString=function(e){return B(this.key,this.style,e)},e}(),be={onCreateRule:function(e,t,r){return"@viewport"===e||"@-ms-viewport"===e?new ve(e,t,r):null}},xe=function(){function e(e,t,r){this.type="simple",this.isProcessed=!1,this.key=e,this.value=t,this.options=r}return e.prototype.toString=function(e){if(Array.isArray(this.value)){for(var t="",r=0;r<this.value.length;r++)t+=this.key+" "+this.value[r]+";",this.value[r+1]&&(t+="\n");return t}return this.key+" "+this.value+";"},e}(),we={"@charset":!0,"@import":!0,"@namespace":!0},ke={onCreateRule:function(e,t,r){return e in we?new xe(e,t,r):null}},Se=[Q,ie,de,pe,ge,be,ke],Pe={process:!0},Re={force:!0,process:!0},Ce=function(){function e(e){this.map={},this.raw={},this.index=[],this.counter=0,this.options=e,this.classes=e.classes,this.keyframes=e.keyframes}var t=e.prototype;return t.add=function(e,t,r){var n=this.options,i=n.parent,o=n.sheet,s=n.jss,a=n.Renderer,l=n.generateId,u=n.scoped,c=x({classes:this.classes,parent:i,sheet:o,jss:s,Renderer:a,generateId:l,scoped:u,name:e,keyframes:this.keyframes,selector:void 0},r),f=e;e in this.raw&&(f=e+"-d"+this.counter++),this.raw[f]=t,f in this.classes&&(c.selector="."+Z(this.classes[f]));var d=W(f,t,c);if(!d)return null;this.register(d);var h=void 0===c.index?this.index.length:c.index;return this.index.splice(h,0,d),d},t.replace=function(e,t,r){var n=this.get(e),i=this.index.indexOf(n);n&&this.remove(n);var o=r;return-1!==i&&(o=x({},r,{index:i})),this.add(e,t,o)},t.get=function(e){return this.map[e]},t.remove=function(e){this.unregister(e),delete this.raw[e.key],this.index.splice(this.index.indexOf(e),1)},t.indexOf=function(e){return this.index.indexOf(e)},t.process=function(){var e=this.options.jss.plugins;this.index.slice(0).forEach(e.onProcessRule,e)},t.register=function(e){this.map[e.key]=e,e instanceof K?(this.map[e.selector]=e,e.id&&(this.classes[e.key]=e.id)):e instanceof ae&&this.keyframes&&(this.keyframes[e.name]=e.id)},t.unregister=function(e){delete this.map[e.key],e instanceof K?(delete this.map[e.selector],delete this.classes[e.key]):e instanceof ae&&delete this.keyframes[e.name]},t.update=function(){var e,t,r;if("string"==typeof(arguments.length<=0?void 0:arguments[0])?(e=arguments.length<=0?void 0:arguments[0],t=arguments.length<=1?void 0:arguments[1],r=arguments.length<=2?void 0:arguments[2]):(t=arguments.length<=0?void 0:arguments[0],r=arguments.length<=1?void 0:arguments[1],e=null),e)this.updateOne(this.get(e),t,r);else for(var n=0;n<this.index.length;n++)this.updateOne(this.index[n],t,r)},t.updateOne=function(t,r,n){void 0===n&&(n=Pe);var i=this.options,o=i.jss.plugins,s=i.sheet;if(t.rules instanceof e)t.rules.update(r,n);else{var a=t.style;if(o.onUpdate(r,t,s,n),n.process&&a&&a!==t.style){for(var l in o.onProcessStyle(t.style,t,s),t.style){var u=t.style[l];u!==a[l]&&t.prop(l,u,Re)}for(var c in a){var f=t.style[c],d=a[c];null==f&&f!==d&&t.prop(c,null,Re)}}}},t.toString=function(e){for(var t="",r=this.options.sheet,n=!!r&&r.options.link,i=q(e).linebreak,o=0;o<this.index.length;o++){var s=this.index[o].toString(e);(s||n)&&(t&&(t+=i),t+=s)}return t},e}(),Oe=function(){function e(e,t){for(var r in this.attached=!1,this.deployed=!1,this.classes={},this.keyframes={},this.options=x({},t,{sheet:this,parent:this,classes:this.classes,keyframes:this.keyframes}),t.Renderer&&(this.renderer=new t.Renderer(this)),this.rules=new Ce(this.options),e)this.rules.add(r,e[r]);this.rules.process()}var t=e.prototype;return t.attach=function(){return this.attached||(this.renderer&&this.renderer.attach(),this.attached=!0,this.deployed||this.deploy()),this},t.detach=function(){return this.attached?(this.renderer&&this.renderer.detach(),this.attached=!1,this):this},t.addRule=function(e,t,r){var n=this.queue;this.attached&&!n&&(this.queue=[]);var i=this.rules.add(e,t,r);return i?(this.options.jss.plugins.onProcessRule(i),this.attached?this.deployed?(n?n.push(i):(this.insertRule(i),this.queue&&(this.queue.forEach(this.insertRule,this),this.queue=void 0)),i):i:(this.deployed=!1,i)):null},t.replaceRule=function(e,t,r){var n=this.rules.get(e);if(!n)return this.addRule(e,t,r);var i=this.rules.replace(e,t,r);return i&&this.options.jss.plugins.onProcessRule(i),this.attached?this.deployed?(this.renderer&&(i?n.renderable&&this.renderer.replaceRule(n.renderable,i):this.renderer.deleteRule(n)),i):i:(this.deployed=!1,i)},t.insertRule=function(e){this.renderer&&this.renderer.insertRule(e)},t.addRules=function(e,t){var r=[];for(var n in e){var i=this.addRule(n,e[n],t);i&&r.push(i)}return r},t.getRule=function(e){return this.rules.get(e)},t.deleteRule=function(e){var t="object"==typeof e?e:this.rules.get(e);return!(!t||this.attached&&!t.renderable)&&(this.rules.remove(t),!(this.attached&&t.renderable&&this.renderer)||this.renderer.deleteRule(t.renderable))},t.indexOf=function(e){return this.rules.indexOf(e)},t.deploy=function(){return this.renderer&&this.renderer.deploy(),this.deployed=!0,this},t.update=function(){var e;return(e=this.rules).update.apply(e,arguments),this},t.updateOne=function(e,t,r){return this.rules.updateOne(e,t,r),this},t.toString=function(e){return this.rules.toString(e)},e}(),je=function(){function e(){this.plugins={internal:[],external:[]},this.registry={}}var t=e.prototype;return t.onCreateRule=function(e,t,r){for(var n=0;n<this.registry.onCreateRule.length;n++){var i=this.registry.onCreateRule[n](e,t,r);if(i)return i}return null},t.onProcessRule=function(e){if(!e.isProcessed){for(var t=e.options.sheet,r=0;r<this.registry.onProcessRule.length;r++)this.registry.onProcessRule[r](e,t);e.style&&this.onProcessStyle(e.style,e,t),e.isProcessed=!0}},t.onProcessStyle=function(e,t,r){for(var n=0;n<this.registry.onProcessStyle.length;n++)t.style=this.registry.onProcessStyle[n](t.style,t,r)},t.onProcessSheet=function(e){for(var t=0;t<this.registry.onProcessSheet.length;t++)this.registry.onProcessSheet[t](e)},t.onUpdate=function(e,t,r,n){for(var i=0;i<this.registry.onUpdate.length;i++)this.registry.onUpdate[i](e,t,r,n)},t.onChangeValue=function(e,t,r){for(var n=e,i=0;i<this.registry.onChangeValue.length;i++)n=this.registry.onChangeValue[i](n,t,r);return n},t.use=function(e,t){void 0===t&&(t={queue:"external"});var r=this.plugins[t.queue];-1===r.indexOf(e)&&(r.push(e),this.registry=[].concat(this.plugins.external,this.plugins.internal).reduce((function(e,t){for(var r in t)r in e&&e[r].push(t[r]);return e}),{onCreateRule:[],onProcessRule:[],onProcessStyle:[],onProcessSheet:[],onChangeValue:[],onUpdate:[]}))},e}(),Ae=function(){function e(){this.registry=[]}var t=e.prototype;return t.add=function(e){var t=this.registry,r=e.options.index;if(-1===t.indexOf(e))if(0===t.length||r>=this.index)t.push(e);else for(var n=0;n<t.length;n++)if(t[n].options.index>r)return void t.splice(n,0,e)},t.reset=function(){this.registry=[]},t.remove=function(e){var t=this.registry.indexOf(e);this.registry.splice(t,1)},t.toString=function(e){for(var t=void 0===e?{}:e,r=t.attached,n=w(t,["attached"]),i=q(n).linebreak,o="",s=0;s<this.registry.length;s++){var a=this.registry[s];null!=r&&a.attached!==r||(o&&(o+=i),o+=a.toString(n))}return o},z(e,[{key:"index",get:function(){return 0===this.registry.length?0:this.registry[this.registry.length-1].options.index}}]),e}(),Te=new Ae,Ie="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window&&window.Math===Math?window:"undefined"!=typeof self&&self.Math===Math?self:Function("return this")(),Ee="2f1acc6c3a606b082e5eef5e54414ffb";null==Ie[Ee]&&(Ie[Ee]=0);var Me=Ie[Ee]++,Ne=function(e){void 0===e&&(e={});var t=0;return function(r,n){t+=1;var i="",o="";return n&&(n.options.classNamePrefix&&(o=n.options.classNamePrefix),null!=n.options.jss.id&&(i=String(n.options.jss.id))),e.minify?""+(o||"c")+Me+i+t:o+r.key+"-"+Me+(i?"-"+i:"")+"-"+t}},He=function(e){var t;return function(){return t||(t=e()),t}},ze=function(e,t){try{return e.attributeStyleMap?e.attributeStyleMap.get(t):e.style.getPropertyValue(t)}catch(e){return""}},$e=function(e,t,r){try{var n=r;if(Array.isArray(r)&&(n=U(r,!0),"!important"===r[r.length-1]))return e.style.setProperty(t,n,"important"),!0;e.attributeStyleMap?e.attributeStyleMap.set(t,n):e.style.setProperty(t,n)}catch(e){return!1}return!0},De=function(e,t){try{e.attributeStyleMap?e.attributeStyleMap.delete(t):e.style.removeProperty(t)}catch(e){}},Fe=function(e,t){return e.selectorText=t,e.selectorText===t},Le=He((function(){return document.querySelector("head")}));function Ve(e){var t=Te.registry;if(t.length>0){var r=function(e,t){for(var r=0;r<e.length;r++){var n=e[r];if(n.attached&&n.options.index>t.index&&n.options.insertionPoint===t.insertionPoint)return n}return null}(t,e);if(r&&r.renderer)return{parent:r.renderer.element.parentNode,node:r.renderer.element};if(r=function(e,t){for(var r=e.length-1;r>=0;r--){var n=e[r];if(n.attached&&n.options.insertionPoint===t.insertionPoint)return n}return null}(t,e),r&&r.renderer)return{parent:r.renderer.element.parentNode,node:r.renderer.element.nextSibling}}var n=e.insertionPoint;if(n&&"string"==typeof n){var i=function(e){for(var t=Le(),r=0;r<t.childNodes.length;r++){var n=t.childNodes[r];if(8===n.nodeType&&n.nodeValue.trim()===e)return n}return null}(n);if(i)return{parent:i.parentNode,node:i.nextSibling}}return!1}var We=He((function(){var e=document.querySelector('meta[property="csp-nonce"]');return e?e.getAttribute("content"):null})),Ge=function(e,t,r){try{"insertRule"in e?e.insertRule(t,r):"appendRule"in e&&e.appendRule(t)}catch(e){return!1}return e.cssRules[r]},Ue=function(e,t){var r=e.cssRules.length;return void 0===t||t>r?r:t},qe=function(){function e(e){this.getPropertyValue=ze,this.setProperty=$e,this.removeProperty=De,this.setSelector=Fe,this.hasInsertedRules=!1,this.cssRules=[],e&&Te.add(e),this.sheet=e;var t=this.sheet?this.sheet.options:{},r=t.media,n=t.meta,i=t.element;this.element=i||function(){var e=document.createElement("style");return e.textContent="\n",e}(),this.element.setAttribute("data-jss",""),r&&this.element.setAttribute("media",r),n&&this.element.setAttribute("data-meta",n);var o=We();o&&this.element.setAttribute("nonce",o)}var t=e.prototype;return t.attach=function(){if(!this.element.parentNode&&this.sheet){!function(e,t){var r=t.insertionPoint,n=Ve(t);if(!1!==n&&n.parent)n.parent.insertBefore(e,n.node);else if(r&&"number"==typeof r.nodeType){var i=r,o=i.parentNode;o&&o.insertBefore(e,i.nextSibling)}else Le().appendChild(e)}(this.element,this.sheet.options);var e=Boolean(this.sheet&&this.sheet.deployed);this.hasInsertedRules&&e&&(this.hasInsertedRules=!1,this.deploy())}},t.detach=function(){if(this.sheet){var e=this.element.parentNode;e&&e.removeChild(this.element),this.sheet.options.link&&(this.cssRules=[],this.element.textContent="\n")}},t.deploy=function(){var e=this.sheet;e&&(e.options.link?this.insertRules(e.rules):this.element.textContent="\n"+e.toString()+"\n")},t.insertRules=function(e,t){for(var r=0;r<e.index.length;r++)this.insertRule(e.index[r],r,t)},t.insertRule=function(e,t,r){if(void 0===r&&(r=this.element.sheet),e.rules){var n=e,i=r;if("conditional"===e.type||"keyframes"===e.type){var o=Ue(r,t);if(!1===(i=Ge(r,n.toString({children:!1}),o)))return!1;this.refCssRule(e,o,i)}return this.insertRules(n.rules,i),i}var s=e.toString();if(!s)return!1;var a=Ue(r,t),l=Ge(r,s,a);return!1!==l&&(this.hasInsertedRules=!0,this.refCssRule(e,a,l),l)},t.refCssRule=function(e,t,r){e.renderable=r,e.options.parent instanceof Oe&&this.cssRules.splice(t,0,r)},t.deleteRule=function(e){var t=this.element.sheet,r=this.indexOf(e);return-1!==r&&(t.deleteRule(r),this.cssRules.splice(r,1),!0)},t.indexOf=function(e){return this.cssRules.indexOf(e)},t.replaceRule=function(e,t){var r=this.indexOf(e);return-1!==r&&(this.element.sheet.deleteRule(r),this.cssRules.splice(r,1),this.insertRule(t,r))},t.getRules=function(){return this.element.sheet.cssRules},e}(),_e=0,Be=function(){function e(e){this.id=_e++,this.version="10.9.0",this.plugins=new je,this.options={id:{minify:!1},createGenerateId:Ne,Renderer:M?qe:null,plugins:[]},this.generateId=Ne({minify:!1});for(var t=0;t<Se.length;t++)this.plugins.use(Se[t],{queue:"internal"});this.setup(e)}var t=e.prototype;return t.setup=function(e){return void 0===e&&(e={}),e.createGenerateId&&(this.options.createGenerateId=e.createGenerateId),e.id&&(this.options.id=x({},this.options.id,e.id)),(e.createGenerateId||e.id)&&(this.generateId=this.options.createGenerateId(this.options.id)),null!=e.insertionPoint&&(this.options.insertionPoint=e.insertionPoint),"Renderer"in e&&(this.options.Renderer=e.Renderer),e.plugins&&this.use.apply(this,e.plugins),this},t.createStyleSheet=function(e,t){void 0===t&&(t={});var r=t.index;"number"!=typeof r&&(r=0===Te.index?0:Te.index+1);var n=new Oe(e,x({},t,{jss:this,generateId:t.generateId||this.generateId,insertionPoint:this.options.insertionPoint,Renderer:this.options.Renderer,index:r}));return this.plugins.onProcessSheet(n),n},t.removeStyleSheet=function(e){return e.detach(),Te.remove(e),this},t.createRule=function(e,t,r){if(void 0===t&&(t={}),void 0===r&&(r={}),"object"==typeof e)return this.createRule(void 0,e,t);var n=x({},r,{name:e,jss:this,Renderer:this.options.Renderer});n.generateId||(n.generateId=this.generateId),n.classes||(n.classes={}),n.keyframes||(n.keyframes={});var i=W(e,t,n);return i&&this.plugins.onProcessRule(i),i},t.use=function(){for(var e=this,t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return r.forEach((function(t){e.plugins.use(t)})),this},e}(),Xe=function(e){return new Be(e)},Ye=function(){function e(){this.length=0,this.sheets=new WeakMap}var t=e.prototype;return t.get=function(e){var t=this.sheets.get(e);return t&&t.sheet},t.add=function(e,t){this.sheets.has(e)||(this.length++,this.sheets.set(e,{sheet:t,refs:0}))},t.manage=function(e){var t=this.sheets.get(e);if(t)return 0===t.refs&&t.sheet.attach(),t.refs++,t.sheet;N(!1,"[JSS] SheetsManager: can't find sheet to manage")},t.unmanage=function(e){var t=this.sheets.get(e);t?t.refs>0&&(t.refs--,0===t.refs&&t.sheet.detach()):N(!1,"SheetsManager: can't find sheet to unmanage")},z(e,[{key:"size",get:function(){return this.length}}]),e}(),Ze="object"==typeof CSS&&null!=CSS&&"number"in CSS;function Je(e){var t=null;for(var r in e){var n=e[r],i=typeof n;if("function"===i)t||(t={}),t[r]=n;else if("object"===i&&null!==n&&!Array.isArray(n)){var o=Je(n);o&&(t||(t={}),t[r]=o)}}return t}Xe();var Ke=Date.now(),Qe="fnValues"+Ke,et="fnStyle"+ ++Ke;const tt=function(){return{onCreateRule:function(e,t,r){if("function"!=typeof t)return null;var n=W(e,{},r);return n[et]=t,n},onProcessStyle:function(e,t){if(Qe in t||et in t)return e;var r={};for(var n in e){var i=e[n];"function"==typeof i&&(delete e[n],r[n]=i)}return t[Qe]=r,e},onUpdate:function(e,t,r,n){var i=t,o=i[et];o&&(i.style=o(e)||{});var s=i[Qe];if(s)for(var a in s)i.prop(a,s[a](e),n)}}};var rt=n(121),nt=function(e){return e&&e[rt.Z]&&e===e[rt.Z]()};const it=function(e){return{onCreateRule:function(t,r,n){if(!nt(r))return null;var i=r,o=W(t,{},n);return i.subscribe((function(t){for(var r in t)o.prop(r,t[r],e)})),o},onProcessRule:function(t){if(!t||"style"===t.type){var r=t,n=r.style,i=function(t){var i=n[t];if(!nt(i))return"continue";delete n[t],i.subscribe({next:function(n){r.prop(t,n,e)}})};for(var o in n)i(o)}}}};var ot=/;\n/,st=function(e){"string"==typeof e.style&&(e.style=function(e){for(var t={},r=e.split(ot),n=0;n<r.length;n++){var i=(r[n]||"").trim();if(i){var o=i.indexOf(":");if(-1!==o){var s=i.substr(0,o).trim(),a=i.substr(o+1).trim();t[s]=a}}}return t}(e.style))};const at=function(){return{onProcessRule:st}};var lt="@global",ut="@global ",ct=function(){function e(e,t,r){for(var n in this.type="global",this.at=lt,this.isProcessed=!1,this.key=e,this.options=r,this.rules=new Ce(x({},r,{parent:this})),t)this.rules.add(n,t[n]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.addRule=function(e,t,r){var n=this.rules.add(e,t,r);return n&&this.options.jss.plugins.onProcessRule(n),n},t.replaceRule=function(e,t,r){var n=this.rules.replace(e,t,r);return n&&this.options.jss.plugins.onProcessRule(n),n},t.indexOf=function(e){return this.rules.indexOf(e)},t.toString=function(e){return this.rules.toString(e)},e}(),ft=function(){function e(e,t,r){this.type="global",this.at=lt,this.isProcessed=!1,this.key=e,this.options=r;var n=e.substr(ut.length);this.rule=r.jss.createRule(n,t,x({},r,{parent:this}))}return e.prototype.toString=function(e){return this.rule?this.rule.toString(e):""},e}(),dt=/\s*,\s*/g;function ht(e,t){for(var r=e.split(dt),n="",i=0;i<r.length;i++)n+=t+" "+r[i].trim(),r[i+1]&&(n+=", ");return n}const pt=function(){return{onCreateRule:function(e,t,r){if(!e)return null;if(e===lt)return new ct(e,t,r);if("@"===e[0]&&e.substr(0,ut.length)===ut)return new ft(e,t,r);var n=r.parent;return n&&("global"===n.type||n.options.parent&&"global"===n.options.parent.type)&&(r.scoped=!1),r.selector||!1!==r.scoped||(r.selector=e),null},onProcessRule:function(e,t){"style"===e.type&&t&&(function(e,t){var r=e.options,n=e.style,i=n?n[lt]:null;if(i){for(var o in i)t.addRule(o,i[o],x({},r,{selector:ht(o,e.selector)}));delete n[lt]}}(e,t),function(e,t){var r=e.options,n=e.style;for(var i in n)if("@"===i[0]&&i.substr(0,lt.length)===lt){var o=ht(i.substr(lt.length),e.selector);t.addRule(o,n[i],x({},r,{selector:o})),delete n[i]}}(e,t))}}};var yt=function(e){return e&&"object"==typeof e&&!Array.isArray(e)},mt="extendCurrValue"+Date.now();function gt(e,t,r,n){return void 0===n&&(n={}),function(e,t,r,n){if("string"!=typeof e.extend)if(Array.isArray(e.extend))for(var i=0;i<e.extend.length;i++){var o=e.extend[i];gt("string"==typeof o?x({},e,{extend:o}):e.extend[i],t,r,n)}else for(var s in e.extend)"extend"!==s?yt(e.extend[s])?(s in n||(n[s]={}),gt(e.extend[s],t,r,n[s])):n[s]=e.extend[s]:gt(e.extend.extend,t,r,n);else{if(!r)return;var a=r.getRule(e.extend);if(!a)return;if(a===t)return;var l=a.options.parent;l&&gt(l.rules.raw[e.extend],t,r,n)}}(e,t,r,n),function(e,t,r,n){for(var i in e)"extend"!==i&&(yt(n[i])&&yt(e[i])?gt(e[i],t,r,n[i]):yt(e[i])?n[i]=gt(e[i],t,r):n[i]=e[i])}(e,t,r,n),n}const vt=function(){return{onProcessStyle:function(e,t,r){return"extend"in e?gt(e,t,r):e},onChangeValue:function(e,t,r){if("extend"!==t)return e;if(null==e||!1===e){for(var n in r[mt])r.prop(n,null);return r[mt]=null,null}if("object"==typeof e){for(var i in e)r.prop(i,e[i]);r[mt]=e}return null}}};var bt=/\s*,\s*/g,xt=/&/g,wt=/\$([\w-]+)/g;const kt=function(){function e(e,t){return function(r,n){var i=e.getRule(n)||t&&t.getRule(n);return i?i.selector:n}}function t(e,t){for(var r=t.split(bt),n=e.split(bt),i="",o=0;o<r.length;o++)for(var s=r[o],a=0;a<n.length;a++){var l=n[a];i&&(i+=", "),i+=-1!==l.indexOf("&")?l.replace(xt,s):s+" "+l}return i}function r(e,t,r){if(r)return x({},r,{index:r.index+1});var n=e.options.nestingLevel;n=void 0===n?1:n+1;var i=x({},e.options,{nestingLevel:n,index:t.indexOf(e)+1});return delete i.name,i}return{onProcessStyle:function(n,i,o){if("style"!==i.type)return n;var s,a,l=i,u=l.options.parent;for(var c in n){var f=-1!==c.indexOf("&"),d="@"===c[0];if(f||d){if(s=r(l,u,s),f){var h=t(c,l.selector);a||(a=e(u,o)),h=h.replace(wt,a);var p=l.key+"-"+c;"replaceRule"in u?u.replaceRule(p,n[c],x({},s,{selector:h})):u.addRule(p,n[c],x({},s,{selector:h}))}else d&&u.addRule(c,{},s).addRule(l.key,n[c],{selector:l.selector});delete n[c]}}return n}}};function St(e,t){if(!t)return!0;if(Array.isArray(t)){for(var r=0;r<t.length;r++){if(!St(e,t[r]))return!1}return!0}if(t.indexOf(" ")>-1)return St(e,t.split(" "));var n=e.options.parent;if("$"===t[0]){var i=n.getRule(t.substr(1));return!!i&&(i!==e&&(n.classes[e.key]+=" "+n.classes[i.key],!0))}return n.classes[e.key]+=" "+t,!0}const Pt=function(){return{onProcessStyle:function(e,t){return"composes"in e?(St(t,e.composes),delete e.composes,e):e}}};var Rt=/[A-Z]/g,Ct=/^ms-/,Ot={};function jt(e){return"-"+e.toLowerCase()}const At=function(e){if(Ot.hasOwnProperty(e))return Ot[e];var t=e.replace(Rt,jt);return Ot[e]=Ct.test(t)?"-"+t:t};function Tt(e){var t={};for(var r in e){t[0===r.indexOf("--")?r:At(r)]=e[r]}return e.fallbacks&&(Array.isArray(e.fallbacks)?t.fallbacks=e.fallbacks.map(Tt):t.fallbacks=Tt(e.fallbacks)),t}const It=function(){return{onProcessStyle:function(e){if(Array.isArray(e)){for(var t=0;t<e.length;t++)e[t]=Tt(e[t]);return e}return Tt(e)},onChangeValue:function(e,t,r){if(0===t.indexOf("--"))return e;var n=At(t);return t===n?e:(r.prop(n,e),null)}}};var Et=Ze&&CSS?CSS.px:"px",Mt=Ze&&CSS?CSS.ms:"ms",Nt=Ze&&CSS?CSS.percent:"%";function Ht(e){var t=/(-[a-z])/g,r=function(e){return e[1].toUpperCase()},n={};for(var i in e)n[i]=e[i],n[i.replace(t,r)]=e[i];return n}var zt=Ht({"animation-delay":Mt,"animation-duration":Mt,"background-position":Et,"background-position-x":Et,"background-position-y":Et,"background-size":Et,border:Et,"border-bottom":Et,"border-bottom-left-radius":Et,"border-bottom-right-radius":Et,"border-bottom-width":Et,"border-left":Et,"border-left-width":Et,"border-radius":Et,"border-right":Et,"border-right-width":Et,"border-top":Et,"border-top-left-radius":Et,"border-top-right-radius":Et,"border-top-width":Et,"border-width":Et,"border-block":Et,"border-block-end":Et,"border-block-end-width":Et,"border-block-start":Et,"border-block-start-width":Et,"border-block-width":Et,"border-inline":Et,"border-inline-end":Et,"border-inline-end-width":Et,"border-inline-start":Et,"border-inline-start-width":Et,"border-inline-width":Et,"border-start-start-radius":Et,"border-start-end-radius":Et,"border-end-start-radius":Et,"border-end-end-radius":Et,margin:Et,"margin-bottom":Et,"margin-left":Et,"margin-right":Et,"margin-top":Et,"margin-block":Et,"margin-block-end":Et,"margin-block-start":Et,"margin-inline":Et,"margin-inline-end":Et,"margin-inline-start":Et,padding:Et,"padding-bottom":Et,"padding-left":Et,"padding-right":Et,"padding-top":Et,"padding-block":Et,"padding-block-end":Et,"padding-block-start":Et,"padding-inline":Et,"padding-inline-end":Et,"padding-inline-start":Et,"mask-position-x":Et,"mask-position-y":Et,"mask-size":Et,height:Et,width:Et,"min-height":Et,"max-height":Et,"min-width":Et,"max-width":Et,bottom:Et,left:Et,top:Et,right:Et,inset:Et,"inset-block":Et,"inset-block-end":Et,"inset-block-start":Et,"inset-inline":Et,"inset-inline-end":Et,"inset-inline-start":Et,"box-shadow":Et,"text-shadow":Et,"column-gap":Et,"column-rule":Et,"column-rule-width":Et,"column-width":Et,"font-size":Et,"font-size-delta":Et,"letter-spacing":Et,"text-decoration-thickness":Et,"text-indent":Et,"text-stroke":Et,"text-stroke-width":Et,"word-spacing":Et,motion:Et,"motion-offset":Et,outline:Et,"outline-offset":Et,"outline-width":Et,perspective:Et,"perspective-origin-x":Nt,"perspective-origin-y":Nt,"transform-origin":Nt,"transform-origin-x":Nt,"transform-origin-y":Nt,"transform-origin-z":Nt,"transition-delay":Mt,"transition-duration":Mt,"vertical-align":Et,"flex-basis":Et,"shape-margin":Et,size:Et,gap:Et,grid:Et,"grid-gap":Et,"row-gap":Et,"grid-row-gap":Et,"grid-column-gap":Et,"grid-template-rows":Et,"grid-template-columns":Et,"grid-auto-rows":Et,"grid-auto-columns":Et,"box-shadow-x":Et,"box-shadow-y":Et,"box-shadow-blur":Et,"box-shadow-spread":Et,"font-line-height":Et,"text-shadow-x":Et,"text-shadow-y":Et,"text-shadow-blur":Et});function $t(e,t,r){if(null==t)return t;if(Array.isArray(t))for(var n=0;n<t.length;n++)t[n]=$t(e,t[n],r);else if("object"==typeof t)if("fallbacks"===e)for(var i in t)t[i]=$t(i,t[i],r);else for(var o in t)t[o]=$t(e+"-"+o,t[o],r);else if("number"==typeof t&&!1===isNaN(t)){var s=r[e]||zt[e];return!s||0===t&&s===Et?t.toString():"function"==typeof s?s(t).toString():""+t+s}return t}const Dt=function(e){void 0===e&&(e={});var t=Ht(e);return{onProcessStyle:function(e,r){if("style"!==r.type)return e;for(var n in e)e[n]=$t(n,e[n],t);return e},onChangeValue:function(e,r){return $t(r,e,t)}}};var Ft={"background-size":!0,"background-position":!0,border:!0,"border-bottom":!0,"border-left":!0,"border-top":!0,"border-right":!0,"border-radius":!0,"border-image":!0,"border-width":!0,"border-style":!0,"border-color":!0,"box-shadow":!0,flex:!0,margin:!0,padding:!0,outline:!0,"transform-origin":!0,transform:!0,transition:!0},Lt={position:!0,size:!0},Vt={padding:{top:0,right:0,bottom:0,left:0},margin:{top:0,right:0,bottom:0,left:0},background:{attachment:null,color:null,image:null,position:null,repeat:null},border:{width:null,style:null,color:null},"border-top":{width:null,style:null,color:null},"border-right":{width:null,style:null,color:null},"border-bottom":{width:null,style:null,color:null},"border-left":{width:null,style:null,color:null},outline:{width:null,style:null,color:null},"list-style":{type:null,position:null,image:null},transition:{property:null,duration:null,"timing-function":null,timingFunction:null,delay:null},animation:{name:null,duration:null,"timing-function":null,timingFunction:null,delay:null,"iteration-count":null,iterationCount:null,direction:null,"fill-mode":null,fillMode:null,"play-state":null,playState:null},"box-shadow":{x:0,y:0,blur:0,spread:0,color:null,inset:null},"text-shadow":{x:0,y:0,blur:null,color:null}},Wt={border:{radius:"border-radius",image:"border-image",width:"border-width",style:"border-style",color:"border-color"},"border-bottom":{width:"border-bottom-width",style:"border-bottom-style",color:"border-bottom-color"},"border-top":{width:"border-top-width",style:"border-top-style",color:"border-top-color"},"border-left":{width:"border-left-width",style:"border-left-style",color:"border-left-color"},"border-right":{width:"border-right-width",style:"border-right-style",color:"border-right-color"},background:{size:"background-size",image:"background-image"},font:{style:"font-style",variant:"font-variant",weight:"font-weight",stretch:"font-stretch",size:"font-size",family:"font-family",lineHeight:"line-height","line-height":"line-height"},flex:{grow:"flex-grow",basis:"flex-basis",direction:"flex-direction",wrap:"flex-wrap",flow:"flex-flow",shrink:"flex-shrink"},align:{self:"align-self",items:"align-items",content:"align-content"},grid:{"template-columns":"grid-template-columns",templateColumns:"grid-template-columns","template-rows":"grid-template-rows",templateRows:"grid-template-rows","template-areas":"grid-template-areas",templateAreas:"grid-template-areas",template:"grid-template","auto-columns":"grid-auto-columns",autoColumns:"grid-auto-columns","auto-rows":"grid-auto-rows",autoRows:"grid-auto-rows","auto-flow":"grid-auto-flow",autoFlow:"grid-auto-flow",row:"grid-row",column:"grid-column","row-start":"grid-row-start",rowStart:"grid-row-start","row-end":"grid-row-end",rowEnd:"grid-row-end","column-start":"grid-column-start",columnStart:"grid-column-start","column-end":"grid-column-end",columnEnd:"grid-column-end",area:"grid-area",gap:"grid-gap","row-gap":"grid-row-gap",rowGap:"grid-row-gap","column-gap":"grid-column-gap",columnGap:"grid-column-gap"}};function Gt(e,t,r,n){return null==r[t]?e:0===e.length?[]:Array.isArray(e[0])?Gt(e[0],t,r,n):"object"==typeof e[0]?function(e,t,r){return e.map((function(e){return Ut(e,t,r,!1,!0)}))}(e,t,n):[e]}function Ut(e,t,r,n,i){if(!Vt[t]&&!Wt[t])return[];var o=[];if(Wt[t]&&(e=function(e,t,r,n){for(var i in r){var o=r[i];if(void 0!==e[i]&&(n||!t.prop(o))){var s,a=qt((s={},s[o]=e[i],s),t)[o];n?t.style.fallbacks[o]=a:t.style[o]=a}delete e[i]}return e}(e,r,Wt[t],n)),Object.keys(e).length)for(var s in Vt[t])e[s]?Array.isArray(e[s])?o.push(null===Lt[s]?e[s]:e[s].join(" ")):o.push(e[s]):null!=Vt[t][s]&&o.push(Vt[t][s]);return!o.length||i?o:[o]}function qt(e,t,r){for(var n in e){var i=e[n];if(Array.isArray(i)){if(!Array.isArray(i[0])){if("fallbacks"===n){for(var o=0;o<e.fallbacks.length;o++)e.fallbacks[o]=qt(e.fallbacks[o],t,!0);continue}e[n]=Gt(i,n,Ft,t),e[n].length||delete e[n]}}else if("object"==typeof i){if("fallbacks"===n){e.fallbacks=qt(e.fallbacks,t,!0);continue}e[n]=Ut(i,n,t,r),e[n].length||delete e[n]}else""===e[n]&&delete e[n]}return e}const _t=function(){return{onProcessStyle:function(e,t){if(!e||"style"!==t.type)return e;if(Array.isArray(e)){for(var r=0;r<e.length;r++)e[r]=qt(e[r],t);return e}return qt(e,t)}}};var Bt="",Xt="",Yt="",Zt="",Jt=M&&"ontouchstart"in document.documentElement;if(M){var Kt={Moz:"-moz-",ms:"-ms-",O:"-o-",Webkit:"-webkit-"},Qt=document.createElement("p").style;for(var er in Kt)if(er+"Transform"in Qt){Bt=er,Xt=Kt[er];break}"Webkit"===Bt&&"msHyphens"in Qt&&(Bt="ms",Xt=Kt.ms,Zt="edge"),"Webkit"===Bt&&"-apple-trailing-word"in Qt&&(Yt="apple")}var tr=Bt,rr=Xt,nr=Yt,ir=Zt,or=Jt;var sr={noPrefill:["appearance"],supportedProperty:function(e){return"appearance"===e&&("ms"===tr?"-webkit-"+e:rr+e)}},ar={noPrefill:["color-adjust"],supportedProperty:function(e){return"color-adjust"===e&&("Webkit"===tr?rr+"print-"+e:e)}},lr=/[-\s]+(.)?/g;function ur(e,t){return t?t.toUpperCase():""}function cr(e){return e.replace(lr,ur)}function fr(e){return cr("-"+e)}var dr,hr={noPrefill:["mask"],supportedProperty:function(e,t){if(!/^mask/.test(e))return!1;if("Webkit"===tr){var r="mask-image";if(cr(r)in t)return e;if(tr+fr(r)in t)return rr+e}return e}},pr={noPrefill:["text-orientation"],supportedProperty:function(e){return"text-orientation"===e&&("apple"!==nr||or?e:rr+e)}},yr={noPrefill:["transform"],supportedProperty:function(e,t,r){return"transform"===e&&(r.transform?e:rr+e)}},mr={noPrefill:["transition"],supportedProperty:function(e,t,r){return"transition"===e&&(r.transition?e:rr+e)}},gr={noPrefill:["writing-mode"],supportedProperty:function(e){return"writing-mode"===e&&("Webkit"===tr||"ms"===tr&&"edge"!==ir?rr+e:e)}},vr={noPrefill:["user-select"],supportedProperty:function(e){return"user-select"===e&&("Moz"===tr||"ms"===tr||"apple"===nr?rr+e:e)}},br={supportedProperty:function(e,t){return!!/^break-/.test(e)&&("Webkit"===tr?"WebkitColumn"+fr(e)in t&&rr+"column-"+e:"Moz"===tr&&("page"+fr(e)in t&&"page-"+e))}},xr={supportedProperty:function(e,t){if(!/^(border|margin|padding)-inline/.test(e))return!1;if("Moz"===tr)return e;var r=e.replace("-inline","");return tr+fr(r)in t&&rr+r}},wr={supportedProperty:function(e,t){return cr(e)in t&&e}},kr={supportedProperty:function(e,t){var r=fr(e);return"-"===e[0]||"-"===e[0]&&"-"===e[1]?e:tr+r in t?rr+e:"Webkit"!==tr&&"Webkit"+r in t&&"-webkit-"+e}},Sr={supportedProperty:function(e){return"scroll-snap"===e.substring(0,11)&&("ms"===tr?""+rr+e:e)}},Pr={supportedProperty:function(e){return"overscroll-behavior"===e&&("ms"===tr?rr+"scroll-chaining":e)}},Rr={"flex-grow":"flex-positive","flex-shrink":"flex-negative","flex-basis":"flex-preferred-size","justify-content":"flex-pack",order:"flex-order","align-items":"flex-align","align-content":"flex-line-pack"},Cr={supportedProperty:function(e,t){var r=Rr[e];return!!r&&(tr+fr(r)in t&&rr+r)}},Or={flex:"box-flex","flex-grow":"box-flex","flex-direction":["box-orient","box-direction"],order:"box-ordinal-group","align-items":"box-align","flex-flow":["box-orient","box-direction"],"justify-content":"box-pack"},jr=Object.keys(Or),Ar=function(e){return rr+e},Tr={supportedProperty:function(e,t,r){var n=r.multiple;if(jr.indexOf(e)>-1){var i=Or[e];if(!Array.isArray(i))return tr+fr(i)in t&&rr+i;if(!n)return!1;for(var o=0;o<i.length;o++)if(!(tr+fr(i[0])in t))return!1;return i.map(Ar)}return!1}},Ir=[sr,ar,hr,pr,yr,mr,gr,vr,br,xr,wr,kr,Sr,Pr,Cr,Tr],Er=Ir.filter((function(e){return e.supportedProperty})).map((function(e){return e.supportedProperty})),Mr=Ir.filter((function(e){return e.noPrefill})).reduce((function(e,t){return e.push.apply(e,l(t.noPrefill)),e}),[]),Nr={};if(M){dr=document.createElement("p");var Hr=window.getComputedStyle(document.documentElement,"");for(var zr in Hr)isNaN(zr)||(Nr[Hr[zr]]=Hr[zr]);Mr.forEach((function(e){return delete Nr[e]}))}function $r(e,t){if(void 0===t&&(t={}),!dr)return e;if(null!=Nr[e])return Nr[e];"transition"!==e&&"transform"!==e||(t[e]=e in dr.style);for(var r=0;r<Er.length&&(Nr[e]=Er[r](e,dr.style,t),!Nr[e]);r++);try{dr.style[e]=""}catch(e){return!1}return Nr[e]}var Dr,Fr={},Lr={transition:1,"transition-property":1,"-webkit-transition":1,"-webkit-transition-property":1},Vr=/(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g;function Wr(e,t,r){if("var"===t)return"var";if("all"===t)return"all";if("all"===r)return", all";var n=t?$r(t):", "+$r(r);return n||(t||r)}function Gr(e,t){var r=t;if(!Dr||"content"===e)return t;if("string"!=typeof r||!isNaN(parseInt(r,10)))return r;var n=e+r;if(null!=Fr[n])return Fr[n];try{Dr.style[e]=r}catch(e){return Fr[n]=!1,!1}if(Lr[e])r=r.replace(Vr,Wr);else if(""===Dr.style[e]&&("-ms-flex"===(r=rr+r)&&(Dr.style[e]="-ms-flexbox"),Dr.style[e]=r,""===Dr.style[e]))return Fr[n]=!1,!1;return Dr.style[e]="",Fr[n]=r,Fr[n]}M&&(Dr=document.createElement("p"));const Ur=function(){function e(t){for(var r in t){var n=t[r];if("fallbacks"===r&&Array.isArray(n))t[r]=n.map(e);else{var i=!1,o=$r(r);o&&o!==r&&(i=!0);var s=!1,a=Gr(o,U(n));a&&a!==n&&(s=!0),(i||s)&&(i&&delete t[r],t[o||r]=a||n)}}return t}return{onProcessRule:function(e){if("keyframes"===e.type){var t=e;t.at=function(e){return"-"===e[1]||"ms"===tr?e:"@"+rr+"keyframes"+e.substr(10)}(t.at)}},onProcessStyle:function(t,r){return"style"!==r.type?t:e(t)},onChangeValue:function(e,t){return Gr(t,U(e))||e}}};const qr=function(){var e=function(e,t){return e.length===t.length?e>t?1:-1:e.length-t.length};return{onProcessStyle:function(t,r){if("style"!==r.type)return t;for(var n={},i=Object.keys(t).sort(e),o=0;o<i.length;o++)n[i[o]]=t[i[o]];return n}}};const _r=function(e){return void 0===e&&(e={}),{plugins:[tt(),it(e.observable),at(),pt(),vt(),kt(),Pt(),It(),Dt(e.defaultUnit),_t(),Ur(),qr()]}};const Br=function(e){var t={};return function(r){return void 0===t[r]&&(t[r]=e(r)),t[r]}};var Xr=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|default|defer|dir|disabled|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|itemProp|itemScope|itemType|itemID|itemRef|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;Br((function(e){return Xr.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91}));var Yr=Xe(_r()),Zr=function(e){void 0===e&&(e=Yr);var t,r=new Map,n=0,i=function(){return(!t||t.rules.index.length>1e4)&&(t=e.createStyleSheet().attach()),t};function o(){var e=arguments,t=JSON.stringify(e),o=r.get(t);if(o)return o.className;var s=[];for(var a in e){var l=e[a];if(Array.isArray(l))for(var u=0;u<l.length;u++)s.push(l[u]);else s.push(l)}for(var c={},f=[],d=0;d<s.length;d++){var h=s[d];if(h){var p=h;if("string"==typeof h){var y=r.get(h);y&&(y.labels.length&&f.push.apply(f,y.labels),p=y.style)}p.label&&-1===f.indexOf(p.label)&&f.push(p.label),Object.assign(c,p)}}delete c.label;var m=0===f.length?"css":f.join("-"),g=m+"-"+n++;i().addRule(g,c);var v=i().classes[g],b={style:c,labels:f,className:v};return r.set(t,b),r.set(v,b),v}return o.getSheet=i,o}();const Jr=Zr;var Kr=Number.MIN_SAFE_INTEGER||-1e9,Qr=function(){return Kr++},en=(0,o.createContext)({classNamePrefix:"",disableStylesGeneration:!1}),tn=new Map,rn=function(e,t){var r=e.managers;if(r)return r[t]||(r[t]=new Ye),r[t];var n=tn.get(t);return n||(n=new Ye,tn.set(t,n)),n},nn=Xe(_r()),on=new WeakMap,sn=function(e){return on.get(e)};var an=function(e){if(!e.context.disableStylesGeneration){var t=rn(e.context,e.index),r=t.get(e.theme);if(r)return r;var n=e.context.jss||nn,i=function(e){var t=e.styles;return"function"!=typeof t?t:t(e.theme)}(e),o=Je(i),s=n.createStyleSheet(i,function(e,t){var r;e.context.id&&null!=e.context.id.minify&&(r=e.context.id.minify);var n=e.context.classNamePrefix||"";e.name&&!r&&(n+=e.name.replace(/\s/g,"-")+"-");var i="";return e.name&&(i=e.name+", "),i+="function"==typeof e.styles?"Themed":"Unthemed",x({},e.sheetOptions,{index:e.index,meta:i,classNamePrefix:n,link:t,generateId:e.sheetOptions&&e.sheetOptions.generateId?e.sheetOptions.generateId:e.context.generateId})}(e,null!==o));return function(e,t){on.set(e,t)}(s,{dynamicStyles:o,styles:i}),t.add(e.theme,s),s}},ln=M?o.useLayoutEffect:o.useEffect,un={},cn=function(e,t){void 0===t&&(t={});var r=t,n=r.index,i=void 0===n?Qr():n,s=r.theming,a=r.name,l=w(r,["index","theming","name"]),u=s&&s.context||I,c={};return function(t){var r=(0,o.useRef)(!0),n=(0,o.useContext)(en),s=function(t){return"function"==typeof e&&(t||(0,o.useContext)(u))||un}(t&&t.theme),f=(0,o.useMemo)((function(){var r=an({context:n,styles:e,name:a,theme:s,index:i,sheetOptions:l}),o=r?function(e,t){var r=sn(e);if(r){var n={};for(var i in r.dynamicStyles)for(var o=e.rules.index.length,s=e.addRule(i,r.dynamicStyles[i]),a=o;a<e.rules.index.length;a++){var l=e.rules.index[a];e.updateOne(l,t),n[s===l?i:l.key]=l}return n}}(r,t):null;return r&&function(e){var t=e.sheet,r=e.context,n=e.index,i=e.theme;t&&(rn(r,n).manage(i),r.registry&&r.registry.add(t))}({index:i,context:n,sheet:r,theme:s}),[r,o]}),[n,s]),d=f[0],h=f[1];ln((function(){d&&h&&!r.current&&function(e,t,r){for(var n in r)t.updateOne(r[n],e)}(t,d,h)}),[t]),ln((function(){return function(){d&&function(e){e.sheet&&rn(e.context,e.index).unmanage(e.theme)}({index:i,context:n,sheet:d,theme:s}),d&&h&&function(e,t){for(var r in t)e.deleteRule(t[r])}(d,h)}}),[d]);var p=(0,o.useMemo)((function(){return d&&h?function(e,t){if(!t)return e.classes;var r=sn(e);if(!r)return e.classes;var n={};for(var i in r.styles)n[i]=e.classes[i],i in t&&(n[i]+=" "+e.classes[t[i].key]);return n}(d,h):c}),[d,h]);return(0,o.useDebugValue)(p),(0,o.useDebugValue)(s===un?"No theme":s),(0,o.useEffect)((function(){r.current=!1})),p}};Symbol("react-jss-styled"),function(e){void 0===e&&(e=Jr)}();cn({NoData:{position:"sticky",left:0,top:0,width:function(e){var t=e.width;return"".concat(t,"px")},height:function(e){var t=e.height;return"".concat(t,"px")},display:"flex",alignItems:"center",justifyContent:"center"},Td:{padding:"0px"}});const fn=cn({Filler:function(e){return{display:"block",height:e.height,width:e.width}}});const dn=function(e){var t=e.width,r=e.height,n=fn({width:t,height:r});return s().createElement("div",{className:n.Filler})},hn=cn({GridContainer:function(e){var t=e.height,r=e.width,n=e.headerCaptionHeight,i=e.footerCaptionHeight;return{maxWidth:"".concat(r,"px"),width:"".concat(r,"px"),height:"".concat(t-n-i,"px"),display:"flex",flexDirection:"row",flexWrap:"wrap",overflow:"scroll",scrollBehavior:"smooth",padding:0,margin:0}},Item:function(e){var t=e.itemWidth,r=e.itemHeight;return{maxWidth:"".concat(t,"px"),width:"".concat(t,"px"),height:"".concat(r,"px"),scrollBehavior:"smooth",padding:0,margin:0}},HeaderCaption:function(e){var t=e.headerCaptionHeight;return{height:"".concat(t,"px"),position:"sticky",top:0}},FooterCaption:function(e){var t=e.footerCaptionHeight;return{height:"".concat(t,"px"),position:"sticky",bottom:0}}});const pn=function(){var e=(0,o.useContext)(a),t=e.state,r=e.dispatch,n=t.data,i=t.dimensions,l=i.height,u=i.width,c=i.itemHeight,d=i.itemWidth,h=t.Item,p=t.virtual,y=p.topFillerHeight,m=p.bottomFillerHeight,g=p.dataHeight,v=p.scrollTop,b=t.debounceTimes,w=b.scrolling,k=b.filtering,S=t.header,P=S.HeaderCaptionComponent,R=S.headerCaptionHeight,C=t.footer,O=C.FooterCaptionComponent,j=C.footerCaptionHeight,A=t.rhgID,T=t.events,I=T.onItemEnter,E=T.onItemLeave,M=T.onItemClick,N=t.globalFilterValue,H=hn({width:u,height:l,itemHeight:c,itemWidth:d,headerCaptionHeight:R,footerCaptionHeight:j}),z=(0,o.useCallback)(f((function(e){var t=e.value,n=e.field;r({type:"filter",payload:{value:t,field:n}})}),k),[]),$=(0,o.useCallback)(f((function(e){e.preventDefault(),e.stopPropagation();var t=e.target.scrollTop;r({type:"scroll",payload:t>0?t:0})}),w),[]),D=(0,o.useCallback)((function(e){Math.abs(e.target.scrollTop-v)>g/4&&r({type:"loading"}),$(e)}),[g,r,$,v]),F=(0,o.useCallback)((function(e){var t={};return I&&(t.onMouseEnter=function(t){I.call(t,t,{item:e}),r({type:"itemEnter",payload:{item:e}})}),E&&(t.onMouseLeave=function(t){E.call(t,t,{item:e}),r({type:"itemLeave",payload:{item:e}})}),M&&(t.onClick=function(t){return M.call(t,t,{item:e})}),t}),[r,M,I,E]);return s().createElement("div",null,Boolean(R)&&s().createElement("div",{className:H.HeaderCaption},s().createElement(P,{filter:z,value:N})),s().createElement("div",{className:H.GridContainer,onScroll:D},s().createElement(dn,{width:"100%",height:y}),n.map((function(e){return s().createElement("div",x({key:e[A],className:H.Item},F(e)),s().createElement(h,e))})),s().createElement(dn,{width:"100%",height:m})),Boolean(j)&&s().createElement("div",{className:H.FooterCaption},s().createElement(O,{filter:z,value:N})))},yn=cn({Wrapper:function(e){var t=e.width;return{height:e.height,width:t,backgroundColor:"white",overflow:"hidden",position:"relative"}},LoaderContainer:{position:"absolute",top:0,left:0,width:"100%",height:"100%",pointerEvents:"none"}}),mn=function(e){var t=e.config,n=b(),i=n.reducer,l=n.init,u=r((0,o.useReducer)(i,t,l),2),c=u[0],f=u[1],d=c.dimensions,h=d.width,p=d.height,y=c.Loader,m=c.virtual.loading,g=yn({width:h,height:p});return s().createElement("div",{className:[g.Wrapper].join(" ")},s().createElement(a.Provider,{value:{state:c,dispatch:f}},m&&s().createElement("div",{className:g.LoaderContainer},s().createElement(y,null)),s().createElement(pn,null)))}})(),i})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,